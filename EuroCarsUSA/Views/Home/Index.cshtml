@using EuroCarsUSA.Data.Enum

@model IEnumerable<Car>

@{
    ViewData["Title"] = "Home Page";
    var selectedMakes = Context.Request.Query["make"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var selectedCarTypes = Context.Request.Query["carType"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var selectedFuelTypes = Context.Request.Query["fuelType"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var selectedTransmissions = Context.Request.Query["transmission"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var selectedColors = Context.Request.Query["color"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
}

<div class="row justify-content-around mx-0 mb-3">
    <button class="btn btn-secondary rounded-3 filters-mobile col-lg-4 col-md-5 col-sm-5 col-5" id="sort-mobile-button">
        Sort by
    </button>
    
    <button class="btn btn-secondary rounded-3 filters-mobile col-lg-4 col-md-5 col-sm-5 col-5" id="filters-mobile-button">
        Filters
    </button>
</div>

<div class="filters-mobile" id="filters-mobile-list">
    <div class="row mt-4 justify-content-between w-100">
            <div class="col-5 "></div>
            <div class="col-6 "><p class="fs-5">Filters</p></div>
        <div class="col-1 "><img class="filterIcon filter-mobile-close-button" src="~/icons/clear.svg" /></div>
    </div>
    <form method="get" id="mobileFiltersForm">
        <input hidden id="mobileSortOrder" name="sortOrder" value=""></input>
        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="make">
            <div class="col-3">
                <label class="ps-1" for="make">Make</label>
            </div>
            <div class="col-8 text-end">
                <p name="make" class="text-ellipsis"> @Context.Request.Query["make"].ToString() </p>
            </div>
            <div class="col-1 ps-0">
                <img class="filterIcon" src="~/icons/arrow_right_alt.svg" />
            </div>
        </div>


        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="carType">
            <div class="col-4">
                <label class="ps-1" for="make">Car type</label>
            </div>
            <div class="col-7 text-end">
                <p name="carType" class="text-ellipsis"> @Context.Request.Query["carType"].ToString() </p>
            </div>
            <div class="col-1 ps-0">
                <img class="filterIcon" src="~/icons/arrow_right_alt.svg" />
            </div>
        </div>
        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="fuelType">
            <div class="col-4">
                <label class="ps-1" for="fuelType">Fuel type</label>
            </div>
            <div class="col-7 text-end">
                <p name="fuelType" class="text-ellipsis"> @Context.Request.Query["fuelType"].ToString() </p>
            </div>
            <div class="col-1 ps-0">
                <img class="filterIcon" src="~/icons/arrow_right_alt.svg" />
            </div>
        </div>

        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="transmission">
            <div class="col-3">
                <label class="ps-1" for="transmission">Transmission</label>
            </div>
            <div class="col-8 text-end">
                <p name="transmission" class="text-ellipsis"> @Context.Request.Query["transmission"].ToString() </p>
            </div>
            <div class="col-1 ps-0">
                <img class="filterIcon" src="~/icons/arrow_right_alt.svg" />
            </div>
        </div>
        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="color">
            <div class="col-3">
                <label class="ps-1" for="color">Color</label>
            </div>
            <div class="col-8 text-end">
                <p name="color" class="text-ellipsis"> @Context.Request.Query["color"].ToString() </p>
            </div>
            <div class="col-1 ps-0">
                <img class="filterIcon" src="~/icons/arrow_right_alt.svg" />
            </div>
        </div>

        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
            <label class="ps-3" for="model">Model</label>
            <div class="col-12">
                <input type="text" id="model" name="model" class="form-control" value="@Context.Request.Query["model"]" />
            </div>
        </div>

        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
            <label class="ps-3" for="minPrice">Price</label>
            <div class="col-6 pe-1">
                <input type="number" id="minPrice" name="minPrice" placeholder="Min" class="form-control" value="@Context.Request.Query["minPrice"]" />
            </div>
        
            <div class="col-6 ps-1">
                <input type="number" id="maxPrice" name="maxPrice" placeholder="Max" class="form-control" value="@Context.Request.Query["maxPrice"]" />
            </div>

        </div>
        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
            <label class="ps-3" for="minYear">Year</label>
            <div class="col-6 pe-1">
                <input type="number" id="minYear" name="minYear" placeholder="Min" class="form-control" value="@Context.Request.Query["minYear"]" />
            </div>
            <div class="col-6 ps-1">
                <input type="number" id="maxYear" name="maxYear" placeholder="Max" class="form-control" value="@Context.Request.Query["maxYear"]" />
            </div>
        </div>
        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
            <label class="ps-3" for="minMileage">Mileage</label>
            <div class="col-6 pe-1">
                <input type="number" id="minMileage" name="minMileage" placeholder="Min" class="form-control" value="@Context.Request.Query["minMileage"]" />
            </div>
            <div class="col-6 ps-1">
                <input type="number" id="maxMileage" name="maxMileage" placeholder="Max" class="form-control" value="@Context.Request.Query["maxMileage"]" />
            </div>
        </div>


       
        <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
            <label class="ps-3" for="minEngineVolume">Engine volume</label>
            <div class="col-6 pe-1">
                <input type="number" id="minEngineVolume" name="minEngineVolume" placeholder="Min" class="form-control" value="@Context.Request.Query["minEngineVolume"]" />
            </div>
            <div class="col-6 ps-1">
                <input type="number" id="maxEngineVolume" name="maxEngineVolume" placeholder="Max" class="form-control" value="@Context.Request.Query["maxEngineVolume"]" />
            </div>
        </div>

   

        <input type="hidden" id="makeMobileInput" name="make" value="@Context.Request.Query["make"].ToString()" />
        <input type="hidden" id="colorMobileInput" name="color" value="@Context.Request.Query["color"].ToString()" />
        <input type="hidden" id="transmissionMobileInput" name="transmission" value="@Context.Request.Query["transmission"].ToString()" />
        <input type="hidden" id="fuelTypeMobileInput" name="fuelType" value="@Context.Request.Query["fuelType"].ToString()" />
        <input type="hidden" id="carTypeMobileInput" name="carType" value="@Context.Request.Query["carType"].ToString()" />
        <div class="row row-mobile-filter mx-0 justify-content-between">
            <div class="col-6">
                <button class="btn btn-secondary rounded-pill me-4 w-100 d-flex align-items-center justify-content-center filter-mobile-close-button">
                    <img class="carIcon me-2" src="~/icons/clear.svg" /> Close
                </button>
            </div>
            <div class="col-6">
                <button type="submit" class="btn btn-primary rounded-pill w-100" id="mobileFilterSubmitButton">
                    <img class="carIcon" src="~/icons/search.svg" /> Find
                </button>
            </div>
        </div>
        
    </form>
    
</div>


<div class="filters-mobile" id="sort-mobile-list">
    <div class="row mt-4 justify-content-between w-100">
        <div class="col-5 "></div>
        <div class="col-6 "><p class="fs-5">Sort order</p></div>
        <div class="col-1 "><img class="filterIcon sort-mobile-close-button" src="~/icons/clear.svg" /></div>
    </div>
    @foreach (SortOrder sortOrder in Enum.GetValues(typeof(SortOrder)))
    {
        <div class="row w-100 justify-content-between mb-2 mx-0 mobile-sort-option row-mobile-filter d-inline-flex align-items-center">
            <div class="col-10 d-flex align-items-center">
                <!-- Add d-flex align-items-center -->
                <label class="ps-3 fh-filter-text" value="@sortOrder">@sortOrder.ToCustomString()</label>
            </div>
            @if (Context.Request.Query["sortOrder"] == sortOrder.ToString() || (Context.Request.Query["sortOrder"] == String.Empty && sortOrder == SortOrder.NewFirst))
            {
                <div class="col-2 d-flex align-items-center">
                    <!-- Add d-flex align-items-center -->
                    <svg width="96" height="96" viewBox="0 0 96 96" class="carIcon" fill="#7E9DED" xmlns="http://www.w3.org/2000/svg">
                        <g clip-path="url(#clip0_449_5772)">
                            <path d="M36.0001 64.8L19.2001 48L13.6001 53.6L36.0001 76L84.0001 28L78.4001 22.4L36.0001 64.8Z" fill="#7E9DED" />
                        </g>
                        <defs>
                            <clipPath id="clip0_449_5772">
                                <rect width="96" height="96" fill="#7E9DED" />
                            </clipPath>
                        </defs>
                    </svg>
                </div>
            }
        </div>
        <hr style="border-top: 1px solid #000;" class="my-0">

    }
</div>

<div class="row mx-0">

    <div class="col-md-4 col-lg-3 d-none d-md-block">
        <form method="get" id="filtersForm">
            <div class="pb-2 pt-0">
                <div class="fh-title-subhead">Sort by:</div>
                
                <select id="sortOrder" name="sortOrder" class="form-control w-100">
                    @foreach (SortOrder sortOrder in Enum.GetValues(typeof(SortOrder)))
                    {
                        if (Context.Request.Query["sortOrder"] == sortOrder.ToString())
                        {
                            <option value="@sortOrder" selected>@sortOrder.ToCustomString()</option>
                        }
                        else
                        {
                            <option value="@sortOrder">@sortOrder.ToCustomString()</option>
                        }
                    }
                </select>
            </div>
            <div class="fh-header mt-2 mb-1"> Filters:</div>
            <hr style="border-top: 1px solid #000;" class="my-0">
            <div class="row">
                <div class="col-12">
                
                    @* <div class="py-2">
                    <div fh-regular>Min price:</div>
                    <input type="number" id="minPrice" name="minPrice" placeholder="From" class="form-control" value="@Context.Request.Query["minPrice"]" />
                    </div>
                    <div class="py-2">
                    <div fh-regular>Max price:</div>
                    <input type="number" id="maxPrice" name="maxPrice" placeholder="To" class="form-control" value="@Context.Request.Query["maxPrice"]" />
                    </div> *@
                

                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
                        <label class="px-0" for="minPrice">Price</label>
                        <div class="col-6 ps-0 pe-1">
                            <input type="number" id="minPrice" name="minPrice" placeholder="From" class="form-control" value="@Context.Request.Query["minPrice"]" />
                        </div>
                        <div class="col-6 ps-1 pe-0">
                            <input type="number" id="maxPrice" name="maxPrice" placeholder="To" class="form-control" value="@Context.Request.Query["maxPrice"]" />
                        </div>
                    </div>
                
                    <div class="pb-2 pt-0">
                        <div class="fh-regular">Make:</div>
                        <div class="dropdown w-100">
                            <button class="btn dropdown-toggle text-start w-100" type="button" id="dropdownMenuButton" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" data-bs-toggle="dropdown" aria-expanded="false">
                                <span>@(selectedMakes.Any() ? string.Join(", ", selectedMakes) : "Any")</span>
                            </button>
                            <ul class="dropdown-menu w-100" name="make" aria-labelledby="dropdownMenuButton">
                                @foreach (string makeOption in ViewBag.AvailableFilters["Makes"])
                                {
                                    <li>
                                        <label class="dropdown-item">
                                            <input type="checkbox" class="dropdownCheckbox" value="@makeOption" @(selectedMakes.Contains(makeOption) ? "checked" : "")> @makeOption
                                        </label>
                                    </li>
                                }
                            </ul>

                        </div>
                        <input value="@Context.Request.Query["make"]" type="hidden" id="makeInput" name="make">
                    </div>

                    <div class="py-2">
                        <div fh-regular>Model:</div>
                        <input type="text" id="model" name="model" class="form-control" placeholder="Any" value="@Context.Request.Query["model"]" />
                    </div>
                
                    <div class="pb-2 pt-0">
                        <div class="fh-regular">Car type:</div>
                        <div class="dropdown w-100">
                            <button class="btn dropdown-toggle text-start w-100" type="button" id="dropdownCarTypeButton" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" data-bs-toggle="dropdown" aria-expanded="false">
                                <span>@(selectedCarTypes.Any() ? string.Join(", ", selectedCarTypes) : "Any")</span>
                            </button>
                            <ul class="dropdown-menu w-100" name="carType" aria-labelledby="dropdownCarTypeButton">
                                @foreach (string option in ViewBag.AvailableFilters["CarTypes"])
                                {
                                    <li>
                                        <label class="dropdown-item">
                                            <input type="checkbox" class="dropdownCheckbox" value="@option" @(selectedCarTypes.Contains(option) ? "checked" : "")> @option
                                        </label>
                                    </li>
                                }
                            </ul>

                        </div>
                        <input value="@Context.Request.Query["carType"]" type="hidden" id="carTypeInput" name="carType">
                    </div>
                    <div class="pb-2 pt-0">
                        <div class="fh-regular">Fuel type:</div>
                        <div class="dropdown w-100">
                            <button class="btn dropdown-toggle text-start w-100" type="button" id="dropdownFuelTypeButton" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" data-bs-toggle="dropdown" aria-expanded="false">
                                <span>@(selectedFuelTypes.Any() ? string.Join(", ", selectedFuelTypes) : "Any")</span>
                            </button>
                            <ul class="dropdown-menu w-100" name="fuelType" aria-labelledby="dropdownFuelTypeButton">
                                @foreach (string option in ViewBag.AvailableFilters["FuelTypes"])
                                {
                                    <li><label class="dropdown-item"><input type="checkbox" class="dropdownCheckbox" value="@option" @(selectedFuelTypes.Contains(option) ? "checked" : "")> @option</label></li>
                                }
                            </ul>

                        </div>
                        <input value="@Context.Request.Query["fuelType"]" type="hidden" id="fuelTypeInput" name="fuelType">
                    </div>
                    <div class="pb-2 pt-0">
                        <div class="fh-regular">Transmission:</div>
                        <div class="dropdown w-100">
                            <button class="btn dropdown-toggle text-start w-100" type="button" id="dropdownTransmissionButton" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" data-bs-toggle="dropdown" aria-expanded="false">
                                <span>@(selectedTransmissions.Any() ? string.Join(", ", selectedTransmissions) : "Any")</span>
                            </button>
                            <ul class="dropdown-menu w-100" name="transmission" aria-labelledby="dropdownTransmissionButton">
                                @foreach (string option in ViewBag.AvailableFilters["Transmissions"])
                                {
                                    <li><label class="dropdown-item"><input type="checkbox" class="dropdownCheckbox" value="@option" @(selectedTransmissions.Contains(option) ? "checked" : "")> @option</label></li>
                                }
                            </ul>

                        </div>
                        <input value="@Context.Request.Query["transmission"]" type="hidden" id="transmissionInput" name="transmission">
                    </div>

                    <div class="pb-2 pt-0">
                        <div class="fh-regular">Color:</div>
                        <div class="dropdown w-100">
                            <button class="btn dropdown-toggle text-start w-100" type="button" id="dropdownColorButton" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" data-bs-toggle="dropdown" aria-expanded="false">
                                <span>@(selectedColors.Any() ? string.Join(", ", selectedColors) : "Any")</span>
                            </button>
                            <ul class="dropdown-menu w-100" name="color" aria-labelledby="dropdownColorButton">
                                @foreach (string option in ViewBag.AvailableFilters["Colors"])
                                {
                                    <li><label class="dropdown-item"><input type="checkbox" class="dropdownCheckbox" value="@option" @(selectedColors.Contains(option) ? "checked" : "")> @option</label></li>
                                }
                            </ul>

                        </div>
                        <input value="@Context.Request.Query["color"]" type="hidden" id="colorInput" name="color">
                    </div>

                    @* <div class="py-2">
                    <div fh-regular>Min year:</div>
                    <input type="number" id="minYear" name="minYear" placeholder="From" class="form-control" value="@Context.Request.Query["minYear"]" />
                    </div>
                    <div class="py-2">
                    <div fh-regular>Max year:</div>
                    <input type="number" id="maxYear" name="maxYear" placeholder="To" class="form-control" value="@Context.Request.Query["maxYear"]" />
                    </div> *@

                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
                        <label class="px-0" for="minYear">Year</label>
                        <div class="col-6 ps-0 pe-1">
                            <input type="number" id="minYear" name="minYear" placeholder="From" class="form-control" value="@Context.Request.Query["minYear"]" />
                        </div>
                        <div class="col-6 ps-1 pe-0">
                            <input type="number" id="maxYear" name="maxYear" placeholder="To" class="form-control" value="@Context.Request.Query["maxYear"]" />
                        </div>
                    </div>
                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
                        <label class="px-0" for="minMileage">Mileage</label>
                        <div class="col-6 ps-0 pe-1">
                            <input type="number" id="minMileage" name="minMileage" placeholder="From" class="form-control" value="@Context.Request.Query["minMileage"]" />
                        </div>
                        <div class="col-6 ps-1 pe-0">
                            <input type="number" id="maxMileage" name="maxMileage" placeholder="To" class="form-control" value="@Context.Request.Query["maxMileage"]" />
                        </div>
                    </div>
                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
                        <label class="px-0" for="minEngineVolume">Engine Volume</label>
                        <div class="col-6 ps-0 pe-1">
                            <input type="number" id="minEngineVolume" name="minEngineVolume" placeholder="From" class="form-control" value="@Context.Request.Query["minEngineVolume"]" />
                        </div>
                        <div class="col-6 ps-1 pe-0">
                            <input type="number" id="maxEngineVolume" name="maxEngineVolume" placeholder="To" class="form-control" value="@Context.Request.Query["maxEngineVolume"]" />
                        </div>
                    </div>

                        <div class="row row-mobile-filter mx-0 justify-content-between">
                            <div class="col-6">
                                <button class="btn btn-secondary rounded-pill me-4 w-100 d-flex align-items-center justify-content-center" id="filter-clear-button">
                                    <img class="carIcon me-2" src="~/icons/clear.svg" /> Clear
                                </button>
                            </div>
                            <div class="col-6">
                                <button type="submit" class="btn btn-primary rounded-pill w-100" id="filterSubmitButton">
                                    <img class="carIcon" src="~/icons/search.svg" /> Find
                                </button>
                            </div>
                        </div>
                
                </div>
            </div>
        </form>
    </div>
    

    <div class="album py-5 px-0 px-sm-3 bg-light col-md-8 col-lg-9 col-12">
        <div id="carsListing">
            @*All cars go here*@
        </div>
    </div>
</div>


<div class="w-100 text-center mt-3">
    <button class="btn btn-primary rounded-pill" id="showMoreButton">Show more</button>
</div>



@section Scripts {
    <script>
        $(document).ready(function () {
            var carsDisplayed = 0;

            function getCars() {
                $.ajax({
                    url: '/Home/GetCars',
                    data: { carsDisplayed: carsDisplayed },
                    type: 'GET',
                    success: function (data) {
                        var html = $(data);

                        $('#carsListing').append(html);
                        carsDisplayed += html.data('cars-in-view');
                        if (html.data('show-more-button') == "False") {
                            console.log('hiding');
                            $('#showMoreButton').hide();
                        }
                        updateLikeButtons();
                    },
                    error: function () {
                        alert('An error occurred while loading more cars.');
                    }
                });
            }

            function updateLikeButtons() {
                var likedCars = getCookie('likes'); 
                if (likedCars) {
                    likedCars = JSON.parse(likedCars);
                    likedCars.forEach(function (carId) {
                        var likeButton = $('.like-button[data-car-id="' + carId + '"]');
                        likeButton.addClass('btn-primary').removeClass('btn-secondary');
                        likeButton.find('svg path').attr('fill', 'white');
                    });
                }
               
            }

            getCars();

            $('#showMoreButton').click(function () {
                getCars();
            });
        });
    </script>
    <script>
        $('.btn').click(function () {
            $(this).blur();
        });
    </script>

    <script>

        
        function likeCar(carId, event, buttonElement) {
            // Prevent default action and event propagation
            event.preventDefault();
            event.stopPropagation();
            $(buttonElement).blur();
            $(buttonElement).toggleClass('btn-primary btn-secondary');
            var newFillColor = $(buttonElement).hasClass('btn-secondary') ? '#7e9ded' : 'white';
            $(buttonElement).find('svg path').attr('fill', newFillColor);
            var likes = getCookie("likes");
            var likesArray = likes ? JSON.parse(likes) : [];
            if (!likesArray.includes(carId)) {
                likesArray.push(carId);
            } else {
                likesArray = likesArray.filter(id => id !== carId);
            }
            

            // Save updated likes back to cookie
            setCookie("likes", JSON.stringify(likesArray), 7); // Expires in 7 days
        }
        function setCookie(name, value, days) {
            var expires = "";
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; Secure; SameSite=Lax";
        }

        function getCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }
    </script>


    <script>
        $(document).ready(function () {
            var basicFiltersDimensions, advancedFiltersDimensions;
            console.log('loaded');
            var filtersExpanded = false;
            
           

            //$('#advancedFiltersFormWrapper').removeClass('collapse');

            setTimeout(function () {
                basicFiltersDimensions = getActualDimensions('#basicFiltersFormWrapper');
                console.log(basicFiltersDimensions);
                advancedFiltersDimensions = getActualDimensions('#advancedFiltersFormWrapper');
                // Hide #filters and #advancedFilters again
                $('#filters').css({
                    'width': basicFiltersDimensions.width,
                    'height': basicFiltersDimensions.height
                });
                $('#filters').css('display', '');
                $('#advancedFiltersFormWrapper').addClass('collapse');
            }, 0);

            $('#moreFiltersButton').click(function () {
                $('#filters').animate({ height: advancedFiltersDimensions.height, width: advancedFiltersDimensions.width }, 500);
                $('#basicFiltersFormWrapper').fadeOut(200);
                $('#advancedFiltersFormWrapper').fadeIn(200);
                filtersExpanded = true
                $(this).blur();
            });
            $('#lessFiltersButton').click(function () {
                $('#filters').animate({ height: basicFiltersDimensions.height, width: basicFiltersDimensions.width }, 500);
                $('#advancedFiltersFormWrapper').fadeOut(200);
                $('#basicFiltersFormWrapper').fadeIn(200);
                filtersExpanded = false;
            });

            $('#clearButton').click(function () {
                $('#basicFiltersForm input[type="text"], #basicFiltersForm input[type="number"]').val('');

                $('#basicFiltersForm select').prop('selectedIndex', 0);

                $('#advancedFiltersForm input[type="text"], #advancedFiltersForm input[type="number"]').val('');

                $('#advancedFiltersForm select').prop('selectedIndex', 0);
                $(this).blur();
            });
            $('#filterSubmitButton').click(function () {
                $(this).blur();
            });

            $('#filters-mobile-button').click(function () {
                $('#filters-mobile-list').toggleClass('open');
            });

            $('#sort-mobile-button').click(function () {
                $('#sort-mobile-list').toggleClass('open');
            });

            $('.filter-mobile-close-button').click(function () {
                $('#filters-mobile-list').removeClass('open');
            });

            $('.sort-mobile-close-button').click(function () {
                console.log('closing')
                $('#sort-mobile-list').removeClass('open');
            });

            $('#filter-clear-button').click(function (event) {
                event.preventDefault();
                console.log('clearing');
                $('#filtersForm input[type="text"], #filtersForm input[type="number"]').val('');
                $('#filtersForm select').prop('selectedIndex', 0);
                $('#filtersForm input[type="checkbox"]').prop('checked', false);
                $('#filtersForm input[type="hidden"]').val('');
                $('#filtersForm span').text('Any');
            });

            $('.mobile-sort-option').click(function () {
                var sortOrder = $(this).find("label").first().attr('value');
                $('#mobileSortOrder').val(sortOrder);
                $('#mobileFiltersForm').submit();
            });

            $('.showDropdownOptionsButton').click(function () {
                var dropdownOptions = $(this).next('.dropdownOptions');
                dropdownOptions.style.display = dropdownOptions.style.display === "block" ? "none" : "block";
            });

            $('.dropdownCheckbox').change(function () {
                var dropdownOptions = $(this).parent().parent().parent();
                var checkboxes = dropdownOptions.find("input[type='checkbox']");
                var selectedOptions = [];
                checkboxes.each(function () {
                    if ($(this).is(':checked')) {
                        selectedOptions.push($(this).val());
                    }
                });
                var dropdownName = dropdownOptions.attr('name');
                $("#" + dropdownName + "Input").val(selectedOptions.join(','));
                var span = dropdownOptions.prev().find('span');
                span.text(selectedOptions.length > 0 ? selectedOptions.join(', ') : 'Any');
            });

            $('.dropdown-item').click(function (e) {
                e.stopPropagation();
            });



            var carMakes = @Json.Serialize(ViewBag.AvailableFilters["Makes"]);
            var carColors = @Json.Serialize(ViewBag.AvailableFilters["Colors"]);
            var carTransmissions = @Json.Serialize(ViewBag.AvailableFilters["Transmissions"]);
            var carFuelTypes = @Json.Serialize(ViewBag.AvailableFilters["FuelTypes"]);
            var carTypes = @Json.Serialize(ViewBag.AvailableFilters["CarTypes"]);
            var filterValues = {
                'make': carMakes,
                'color': carColors,
                'transmission': carTransmissions,
                'fuelType': carFuelTypes,
                'carType': carTypes,
            };


            $('.mobile-filter-select').click(function () {
                var filterType = $(this).attr('filterType');
                var values = filterValues[filterType];
                console.log(values);
                if (values) {
                    var newScreen = $('.mobile-filter-select-screen');
                    if (newScreen.length === 0) {
                        // If the screen doesn't exist, create it
                        newScreen = $('<div></div>').addClass('mobile-filter-select-screen').addClass('d-flex').addClass('flex-column').addClass('vh-100');
                        $('body').append(newScreen);
                    } else {
                        console.log('emptying');
                        newScreen.empty();
                    }
                    var labelText = filterType.charAt(0).toUpperCase() + filterType.slice(1);
                    newScreen.append('<div class="row mt-4 justify-content-between w-100"> <div class="col-5 "></div> <div class="col-6 "><p class="fs-5">' + labelText + '</p></div> <div class="col-1 " id="filter-mobile-select-close-button"><img class="filterIcon"  src="/icons/clear.svg" /></div> </div>');
                    var listItems = $('<div></div>').addClass('mobile-list-items').addClass('mb-auto');
                    
                    var filterSelectedValues = $('input[name="' + filterType + '"]').val().split(', ');

                    values.forEach(function (value) {
                        var listItem = $('<div></div>').addClass('mobile-list-item');
                        var label = $('<label></label>').text(value);
                        var checkbox = $('<input>').attr({ type: 'checkbox', value: value });

                        
                        if (filterSelectedValues.includes(value)) {
                            checkbox.prop('checked', true);
                        }

                        listItem.append(label);
                        listItem.append(checkbox);
                        listItem.click(function (event) {
                            // Prevent the event from bubbling up to the list item if the checkbox is clicked
                            if (event.target !== checkbox[0]) {
                                checkbox.prop('checked', !checkbox.prop('checked'));
                            }
                        });
                        listItems.append(listItem);
                    });
                    newScreen.append(listItems);
                    newScreen.append('<div class="row mt-auto"> <div class="col-6"><button id="filter-mobile-select-clear-button" class="btn btn-secondary rounded-pill py-2 w-100"> <img class="carIcon" src="/icons/clear.svg" /> Clear</button></div> <div class="col-6">  <button class="btn btn-primary rounded-pill py-2 w-100" id="mobile-filter-select-save-button"> <svg class="carIcon" width="96" height="96" viewBox="0 0 96 96" fill="white" xmlns="http://www.w3.org/2000/svg">< g clip - path="url(#clip0_449_5772)" ><path d="M36.0001 64.8L19.2001 48L13.6001 53.6L36.0001 76L84.0001 28L78.4001 22.4L36.0001 64.8Z" fill = "white" /></g>< defs ><clipPath id="clip0_449_5772" ><rect width="96" height = "96" fill = "white" /></clipPath>< /defs></svg> Save </button> </div > </div>');

                    $('body').append(newScreen);
                    var saveButton = newScreen.find('#mobile-filter-select-save-button');
                    var clearButton = newScreen.find('#filter-mobile-select-clear-button');
                    var closeButton = newScreen.find('#filter-mobile-select-close-button');

                    newScreen.toggleClass('open');
                    saveButton.click(function () {
                        var values = [];
                        $('input[type="checkbox"]').each(function () {

                            var value = $(this).val();
                            if ($(this).prop('checked')) {
                                values.push(value);
                            }
                        });
                        console.log(values);
                        console.log(filterType);
                        $('input[name="' + filterType + '"]').val(values.join(', '));
                        $('p[name="' + filterType + '"]').text(values.join(', '));
                        $('.mobile-filter-select-screen').remove();
                    });
                    clearButton.click(function () {
                        newScreen.find('input[type="checkbox"]').prop('checked', false);
                    });
                    closeButton.click(function () {
                        newScreen.remove();
                    });
                }
            });

            

           

        });

        function getActualDimensions(selector) {
            var previousCss = $(selector).attr("style");

            var dimensions = {
                height: $(selector).outerHeight(true),
                width: $(selector).outerWidth(true)
            };

            $(selector).attr("style", previousCss ? previousCss : "");

            return dimensions;
        }
       

    </script>
}