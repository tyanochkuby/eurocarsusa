@using EuroCarsUSA.Controllers
@using EuroCarsUSA.Data.Enums
@using EuroCarsUSA.Extensions
@using EuroCarsUSA.Resources
@using EuroCarsUSA.Views.Home.Components.ViewModels
@using EuroCarsUSA.Views.Shared.Components
@using Microsoft.Extensions.Localization
@using System.Globalization
@using EuroCarsUSA.ViewModels
@using EuroCarsUSA.Models

@inject IStringLocalizer<HomeController> Translator
@inject Localizer localizer
@model CatalogViewModel

@{
    ViewData["Title"] = "EuroCarsUSA";
    var selectedMakes = Context.Request.Query["make"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var selectedCarTypes = Context.Request.Query["carType"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var selectedFuelTypes = Context.Request.Query["fuelType"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var selectedTransmissions = Context.Request.Query["transmission"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var selectedColors = Context.Request.Query["color"].ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
    var translations = new Dictionary<string, string>();
    foreach (var filter in ViewBag.AvailableFilters)
    {
        foreach (var option in filter.Value)
        {
            translations[option.OriginalValue] = option.TranslatedValue;
        }
    }
    translations["choose"] = localizer.Choose;
}
<div class="container p-3 d-md-none d-block">
    <div class="row g-3 mb-2">
        <a class="col-6">
            @await Html.PartialAsync("_Button", new _Button
            {
                Text = @Translator["SortBy"],
                Color = "primary",
                Classes = "w-100",
                Attributes = "id=\"sort-mobile-button\"",
                LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Swap vert"), Color = "white" }),
                RightIcon = null,
                TextColor = ""
            })
        </a>
        <a class="col-6">
            @await Html.PartialAsync("_Button", new _Button
            {
                Text = @Translator["Filters"],
                Color = "primary",
                Classes = "w-100",
                Attributes = "id=\"filters-mobile-button\"",
                LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Manage search"), Color = "white" }),
                RightIcon = null,
                TextColor = ""
            })
        </a>
    </div>
    
    <div class="row justify-content-center text-headline-sm text-neutral-900 border-neutral900 border-bottom mx-0">
        @localizer.Catalog
    </div>

</div>




<div class="filters-mobile bg-secondary d-flex flex-column" id="filters-mobile-list">
    <form method="get" id="mobileFiltersForm" class="h-100">
        <div class="px-4 position-sticky top-0 border-bottom border-primary bg-white" style="z-index: 1501;">
            <div class="topbar position-relative align-content-center">
                <div class="text-headline-sm d-flex justify-content-center ">@localizer.Filters</div>
                <a class="filter-mobile-close-button position-absolute end-0 top-0 h-100 align-content-center">
                    @await Html.PartialAsync("_IconButton", new { IconName = "Clear", Color = "primary", IconColor = "black", Attributes = "" })
                </a>
            </div>
        </div>

        <div class="flex-grow-1 overflow-auto px-3 px-sm-0" style="z-index: 1499;">
            <div class="px-2 col-12 py-2 pt-3">

                <div class="row d-flex mx-0 mb-3 align-items-center px-1">
                    <div class="col ps-0 pe-1">
                        @await Html.PartialAsync("_LineEdit", new _LineEdit
                   {
                       Attributes = $"type=\"number\" id=\"minPrice\" name=\"minPrice\" value=\"{Context.Request.Query["minPrice"]}\"",
                       Placeholder = Translator["From"],
                       ShowOverline = true,
                       ShowOverlineInside = true,
                       Overline = Translator["Price"],
                       ShowAdditional = true,
                       Additional = "zł",
                       ShowSupportive = false,
                       HasOutsideSupportiveSizeEffect = true,
                       Supportive = Translator["From"]
                   })
                    </div>
                    <hr style="width: 8px; border: none; height: 2px" class="px-0 bg-primary opacity-100 col-auto mb-0">
                    <div class="col ps-1 pe-0">
                        @await Html.PartialAsync("_LineEdit", new _LineEdit
                   {
                       Attributes = $"type=\"number\" id=\"maxPrice\" name=\"maxPrice\" value=\"{Context.Request.Query["maxPrice"]}\"",
                       Placeholder = Translator["To"],
                       ShowOverline = true,
                       ShowOverlineInside = true,
                       Overline = Translator["Price"],
                       ShowAdditional = true,
                       Additional = "zł",
                       ShowSupportive = false,
                       HasOutsideSupportiveSizeEffect = true,
                       Supportive = Translator["To"]
                   })
                    </div>
                </div>


                <div class="bg-white rounded-16 py-2 px-0 mt-1">
                    <input hidden id="mobileSortOrder" name="sortOrder" value=""></input>

                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="make">
                        @await Html.PartialAsync("_ListItem", new _ListItem
                   {
                       Classes = "p-0",
                       Attributes = "",
                       Leading = (object)null,
                       Trailing = Html.Partial("_Icon", new { IconName = Url.Content("Keyboard arrow right"), Color = "primary" }),
                       Headline = Translator["Make"],
                       ShowDivider = true,
                       Clickable = true,
                       Additional = Context.Request.Query["make"].ToString(),
                       ShowAdditional = true,
                       ShowAdditionalBackground = false
                   })
                    </div>

                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="carType">
                        @await Html.PartialAsync("_ListItem", new _ListItem
                   {
                       Classes = "p-0",
                       Attributes = "",
                       Leading = (object)null,
                       Trailing = Html.Partial("_Icon", new { IconName = Url.Content("Keyboard arrow right"), Color = "primary" }),
                       Headline = Translator["CarType"],
                       ShowDivider = true,
                       Clickable = true,
                       Additional = Context.Request.Query["carType"].ToString(),
                       ShowAdditional = true,
                       ShowAdditionalBackground = false
                   })
                    </div>
                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="fuelType">
                        @await Html.PartialAsync("_ListItem", new _ListItem
                   {
                       Classes = "p-0",
                       Attributes = "",
                       Leading = (object)null,
                       Trailing = Html.Partial("_Icon", new { IconName = Url.Content("Keyboard arrow right"), Color = "primary" }),
                       Headline = Translator["FuelType"],
                       ShowDivider = true,
                       Clickable = true,
                       Additional = Context.Request.Query["fuelType"].ToString(),
                       ShowAdditional = true,
                       ShowAdditionalBackground = false
                   })
                    </div>

                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="transmission">
                        @await Html.PartialAsync("_ListItem", new _ListItem
                   {
                       Classes = "p-0",
                       Attributes = "",
                       Leading = (object)null,
                       Trailing = Html.Partial("_Icon", new { IconName = Url.Content("Keyboard arrow right"), Color = "primary" }),
                       Headline = Translator["Transmission"],
                       ShowDivider = true,
                       Clickable = true,
                       Additional = Context.Request.Query["transmission"].ToString(),
                       ShowAdditional = true,
                       ShowAdditionalBackground = false
                   })
                    </div>
                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter mobile-filter-select align-items-center" filterType="color">
                        @await Html.PartialAsync("_ListItem", new _ListItem
                   {
                       Classes = "p-0",
                       Attributes = "",
                       Leading = (object)null,
                       Trailing = Html.Partial("_Icon", new { IconName = Url.Content("Keyboard arrow right"), Color = "primary" }),
                       Headline = Translator["Color"],
                       ShowDivider = true,
                       Clickable = true,
                       Additional = Context.Request.Query["color"].ToString(),
                       ShowAdditional = true,
                       ShowAdditionalBackground = false
                   })
                    </div>

                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
                        <label class="ps-3" for="model">@Translator["Model"]</label>
                        <div class="col-12">
                            <input type="text" id="model" name="model" class="form-control" value="@Context.Request.Query["model"]" />
                        </div>
                    </div>

                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
                        <label class="ps-3" for="minYear">@Translator["Year"]</label>
                        <div class="col-6 pe-1">
                            <input type="number" id="minYear" name="minYear" placeholder="Min" class="form-control" value="@Context.Request.Query["minYear"]" />
                        </div>
                        <div class="col-6 ps-1">
                            <input type="number" id="maxYear" name="maxYear" placeholder="Max" class="form-control" value="@Context.Request.Query["maxYear"]" />
                        </div>
                    </div>
                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
                        <label class="ps-3" for="minMileage">@Translator["Mileage"]</label>
                        <div class="col-6 pe-1">
                            <input type="number" id="minMileage" name="minMileage" placeholder="Min" class="form-control" value="@Context.Request.Query["minMileage"]" />
                        </div>
                        <div class="col-6 ps-1">
                            <input type="number" id="maxMileage" name="maxMileage" placeholder="Max" class="form-control" value="@Context.Request.Query["maxMileage"]" />
                        </div>
                    </div>



                    <div class="row justify-content-between mb-2 mx-0 row-mobile-filter">
                        <label class="ps-3" for="minEngineVolume">@Translator["EngineVolume"]</label>
                        <div class="col-6 pe-1">
                            <input type="number" id="minEngineVolume" name="minEngineVolume" placeholder="Min" class="form-control" value="@Context.Request.Query["minEngineVolume"]" />
                        </div>
                        <div class="col-6 ps-1">
                            <input type="number" id="maxEngineVolume" name="maxEngineVolume" placeholder="Max" class="form-control" value="@Context.Request.Query["maxEngineVolume"]" />
                        </div>
                    </div>



                    <input type="hidden" id="makeMobileInput" name="make" value="@Context.Request.Query["make"].ToString()" />
                    <input type="hidden" id="colorMobileInput" name="color" value="@Context.Request.Query["color"].ToString()" />
                    <input type="hidden" id="transmissionMobileInput" name="transmission" value="@Context.Request.Query["transmission"].ToString()" />
                    <input type="hidden" id="fuelTypeMobileInput" name="fuelType" value="@Context.Request.Query["fuelType"].ToString()" />
                    <input type="hidden" id="carTypeMobileInput" name="carType" value="@Context.Request.Query["carType"].ToString()" />
                </div>
            </div>
        </div>

        <div class="px-2 position-sticky bottom-0 pt-2 bg-transparent ">
            <div class="container px-0">
                <div class="row gx-3 mx-0 row-mobile-filter justify-content-between bg-white rounded-16 rounded-bottom-0 topbar align-content-center border border-1 border-bottom-0 border-primary">
                    <a id="" class="col-6 filter-mobile-close-button">
                       @await Html.PartialAsync("_Button", new _Button
                       {
                           Text = Translator["Close"],
                           Color = "secondary",
                           Classes = "w-100",
                           Attributes = "",
                           LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Clear"), Color = "primary" }),
                           RightIcon = null,
                           TextColor = "text-primary"
                       })
                    </a>
                    <a id="mobileFilterSubmitButton" class="col-6">
                        @await Html.PartialAsync("_Button", new _Button
                        {
                            Text = Translator["Find"],
                            Color = "primary",
                            Classes = "w-100",
                            Attributes = $"type=\"submit\"",
                            LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Search"), Color = "white" }),
                            RightIcon = null,
                            TextColor = ""
                        })
                    </a>
                </div>
            </div>
        </div>
        
    </form>
    
</div>


<div class="filters-mobile bg-secondary d-flex flex-column" id="sort-mobile-list">
    <div class="px-4 border-bottom border-primary bg-white">
        <div class="topbar position-relative align-content-center">
            <div class="text-headline-sm d-flex justify-content-center ">@Translator["SortBy"]</div>
            <a class="sort-mobile-close-button position-absolute end-0 top-0 h-100 align-content-center">
                @await Html.PartialAsync("_IconButton", new { IconName = "Clear", Color = "primary", IconColor = "black", Attributes = "" })
            </a>
        </div>
    </div>
    <div class="px-2 px-sm-0 align-content-between h-100 row mx-0">
        <div class="px-0 col-12 py-2">
            <div class="bg-white rounded-16 py-2 container px-0">
                @foreach (SortOrderType sortOrder in Enum.GetValues(typeof(SortOrderType)))
                {
                    @if (Context.Request.Query["sortOrder"] == sortOrder.ToString() || (Context.Request.Query["sortOrder"].ToString() == String.Empty && sortOrder == SortOrderType.NewFirst))
                    {
                        <div class="row m-0 mobile-sort-option" value="@sortOrder">
                            @await Html.PartialAsync("_ListItem", new _ListItem
                            {
                                Classes = "p-0",
                                Attributes = "",
                                Leading = (object)null,
                                Trailing = Html.Partial("_Icon", new { IconName = Url.Content("Done"), Color = "primary" }),
                                Headline = $"{@sortOrder.ToLocalizedString(Translator)}",
                                ShowDivider = true,
                                Clickable = true
                            })    
                        </div>
                    }    
                    else
                    {
                        <div class="row m-0 mobile-sort-option " value="@sortOrder">
                            @await Html.PartialAsync("_ListItem", new _ListItem
                            {
                                Classes = "p-0",
                                Attributes = "",
                                Leading = (object)null,
                                Trailing = (object)null,
                                Headline = $"{@sortOrder.ToLocalizedString(Translator)}",
                                ShowDivider = true,
                                Clickable = true
                            })
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    
</div>

<div class="row mx-0">

    <div class="col-md-6 col-lg-5 col-xl-4 col-xxl-3 d-none d-md-block ps-3 pe-4">
        <form method="get" id="filtersForm">
            <div class="fh-header mt-2 mb-1">@Translator["Filters"]:</div>
            <hr style="border-top: 1px solid #000;" class="my-0">
            <div class="row mx-0 mt-2">
                <div class="col-12 p-3 pt-2 bg-secondary-200 rounded-16 border border-secondary-500 mb-2">
                    <div class="pt-0">
                        <div class="dropdown">
                            @{
                                var sortName = SortOrderType.NewFirst.ToLocalizedString(Translator);
                                foreach (SortOrderType sortOrder in Enum.GetValues(typeof(SortOrderType)))
                                {
                                    if (Context.Request.Query["sortOrder"] == sortOrder.ToString())
                                    {
                                        sortName = sortOrder.ToLocalizedString(Translator);
                                    }
                                }
                            }
                            @Html.Partial("_ExpandButton", new _ExpandButton
                            {
                                Classes = "",
                                Attributes = $"type=\"button\" id=\"dropdownSortbyButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"",
                                Placeholder = sortName,
                                ShowOverline = true,
                                ShowOverlineInside = false,
                                HasOutsidOverlineSizeEffect = true,
                                Overline = @Translator["SortBy"] + " :",
                                ShowAdditionalBackground = true
                            })
                            <ul class="dropdown-menu w-100" name="dropdownSortby" aria-labelledby="dropdownSortbyButton">
                                @foreach (SortOrderType sortOrder in Enum.GetValues(typeof(SortOrderType)))
                                {
                                    <li>
                                        @Html.Partial("_ListItem", new _ListItem
                                        {
                                            Classes = "dropdown-item p-0",
                                            Headline = sortOrder.ToLocalizedString(Translator),
                                            Attributes = $"data-value='{sortOrder}'",
                                            ShowDivider = true,
                                        })
                                    </li>
                                }
                            </ul>
                        </div>
                        <select hidden id="sortOrderSelect" name="sortOrder">
                            @foreach (SortOrderType sortOrder in Enum.GetValues(typeof(SortOrderType)))
                            {
                                if (Context.Request.Query["sortOrder"] == sortOrder.ToString())
                                {
                                    <option value="@sortOrder" selected>@sortOrder.ToLocalizedString(Translator)</option>
                                }
                                else
                                {
                                    <option value="@sortOrder">
                                        @sortOrder.ToLocalizedString(Translator)
                                    </option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="col-12 p-3 bg-secondary-200 rounded-16 border border-secondary-500">

                    <div class="pt-0 mb-2">
                        <div class="dropdown w-100">
                            @await Html.PartialAsync("_ExpandButton", new _ExpandButton
                            {
                                Attributes = $"type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"",
                           Placeholder = (selectedMakes.Any() ? string.Join(", ", selectedMakes.Select(s => localizer.GetValue($"{typeof(CarMake).Name}_{s}"))) : Translator["Choose"]),
                                ShowOverline = true,
                                ShowOverlineInside = false, 
                                HasOutsidOverlineSizeEffect = true,
                                Overline = Translator["Make"],
                                ShowAdditionalBackground = true,
                                ShowAdditional = (selectedMakes.Any() ? true : false),
                                Additional = (selectedMakes.Count().ToString()),
                            })
                            <ul class="dropdown-menu w-100 my-shadow-1" name="make" aria-labelledby="dropdownMenuButton" style="max-height: 320px; overflow-y:auto">
                                @foreach (FilterOptionViewModel makeOption in ViewBag.AvailableFilters["make"])
                                {
                                    <li>
                                        @await Html.PartialAsync("_ListItem", new _ListItem
                                        {
                                            Classes = "dropdown-item p-0",
                                            Attributes = "",
                                            Leading = await Html.PartialAsync("_Checkbox", new _Checkbox
                                            {
                                                Attributes = $"value=\"{makeOption.OriginalValue}\" {(selectedMakes.Contains(makeOption.OriginalValue) ? "checked" : "")}"
                                            }),
                                            Trailing = (object)null,
                                            Headline = makeOption.TranslatedValue,
                                            ShowDivider = true,
                                            Clickable = true
                                        })
                                    </li>
                                }
                            </ul>
                        </div>
                        <input value="@Context.Request.Query["make"]" type="hidden" id="makeInput" name="make">
                    </div>


                    <div class="mb-2">
                        @await Html.PartialAsync("_LineEdit", new _LineEdit
                    {
                        Attributes = $"type=\"text\" id=\"model\" name=\"model\" value=\"{Context.Request.Query["model"]}\"",
                        Placeholder = Translator["Type"],
                        ShowOverline = true,
                        ShowOverlineInside = false, 
                        HasOutsidOverlineSizeEffect = true,
                        Overline = Translator["Model"]
                    })
                    </div>
                
                    <div class="pt-0 mb-2">
                        <div class="dropdown w-100">
                            @await Html.PartialAsync("_ExpandButton", new _ExpandButton
                               {
                                   Attributes = $"type=\"button\" id=\"dropdownCarTypeButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"",
                           Placeholder = (selectedCarTypes.Any() ? string.Join(", ", selectedCarTypes.Select(s => localizer.GetValue($"{typeof(CarType).Name}_{s}"))) : Translator["Choose"]),
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["CarType"],
                                   ShowAdditionalBackground = true,
                                   ShowAdditional = (selectedCarTypes.Any() ? true : false),
                                   Additional = (selectedCarTypes.Count().ToString())
                               })
                            <ul class="dropdown-menu w-100 my-shadow-1" name="carType" aria-labelledby="dropdownCarTypeButton" style="max-height: 320px; overflow-y:auto">
                                @foreach (FilterOptionViewModel option in ViewBag.AvailableFilters["carType"])
                                {
                                    <li>
                                        @await Html.PartialAsync("_ListItem", new _ListItem
                                           {
                                               Classes = "dropdown-item p-0",
                                               Leading = await Html.PartialAsync("_Checkbox", new _Checkbox
                                               {
                                                   Attributes = $"value=\"{option.OriginalValue}\" {(selectedCarTypes.Contains(option.OriginalValue) ? "checked" : "")}"
                                               }),
                                               Headline = option.TranslatedValue,
                                               ShowDivider = true,
                                               Clickable = true,
                                           })
                                    </li>
                                }
                            </ul>
                        </div>
                        <input value="@Context.Request.Query["carType"]" type="hidden" id="carTypeInput" name="carType">
                    </div>

                    <div class="pt-0 mb-2">
                        <div class="dropdown w-100">
                            @await Html.PartialAsync("_ExpandButton", new _ExpandButton
                                   {
                                       Attributes = $"type=\"button\" id=\"dropdownFuelTypeButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"",
                           Placeholder = (selectedFuelTypes.Any() ? string.Join(", ", selectedFuelTypes.Select(s => localizer.GetValue($"{typeof(CarFuelType).Name}_{s}"))) : Translator["Choose"]),
                                       ShowOverline = true,
                                       ShowOverlineInside = false, 
                                       HasOutsidOverlineSizeEffect = true,
                                       Overline = Translator["FuelType"],
                                       ShowAdditionalBackground = true,
                                       ShowAdditional = (selectedFuelTypes.Any() ? true : false),
                                       Additional = (selectedFuelTypes.Count().ToString()),
                                   })
                            <ul class="dropdown-menu w-100 my-shadow-1" name="fuelType" aria-labelledby="dropdownFuelTypeButton" style="max-height: 320px; overflow-y:auto">
                                @foreach (FilterOptionViewModel option in ViewBag.AvailableFilters["fuelType"])
                                {
                                    <li>
                                        @await Html.PartialAsync("_ListItem", new _ListItem
                                           {
                                               Classes = "dropdown-item p-0",
                                               Leading = await Html.PartialAsync("_Checkbox", new _Checkbox
                                               {
                                                   Attributes = $"value=\"{option.OriginalValue}\" {(selectedFuelTypes.Contains(option.OriginalValue) ? "checked" : "")}"
                                               }),
                                               Headline = option.TranslatedValue,
                                               ShowDivider = true,
                                               Clickable = true,
                                           })
                                    </li>
                                }
                            </ul>
                        </div>
                        <input value="@Context.Request.Query["fuelType"]" type="hidden" id="fuelTypeInput" name="fuelType">
                    </div>

                    <div class="pt-0 mb-2">
                        <div class="dropdown w-100">
                            @await Html.PartialAsync("_ExpandButton", new _ExpandButton
                               {
                                   Attributes = $"type=\"button\" id=\"dropdownTransmissionButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"",
                           Placeholder = (selectedTransmissions.Any() ? string.Join(", ", selectedTransmissions.Select(s => localizer.GetValue($"{typeof(CarTransmission).Name}_{s}"))) : Translator["Choose"]),
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["Transmission"],
                                   ShowAdditionalBackground = true,
                                   ShowAdditional = (selectedTransmissions.Any() ? true : false),
                                   Additional = (selectedTransmissions.Count().ToString()),
                               })
                            <ul class="dropdown-menu w-100 my-shadow-1" name="transmission" aria-labelledby="dropdownTransmissionButton" style="max-height: 320px; overflow-y:auto">
                                @foreach (FilterOptionViewModel option in ViewBag.AvailableFilters["transmission"])
                                {
                                    <li>
                                        @await Html.PartialAsync("_ListItem", new _ListItem
                                           {
                                               Classes = "dropdown-item p-0",
                                               Leading = await Html.PartialAsync("_Checkbox", new _Checkbox
                                               {
                                                   Attributes = $"value=\"{option.OriginalValue}\" {(selectedTransmissions.Contains(option.OriginalValue) ? "checked" : "")}"
                                               }),
                                               Headline = option.TranslatedValue,
                                               ShowDivider = true,
                                               Clickable = true,
                                           })
                                    </li>
                                }
                            </ul>
                        </div>
                        <input value="@Context.Request.Query["transmission"]" type="hidden" id="transmissionInput" name="transmission">
                    </div>

                    <div class="pt-0 mb-2">
                        <div class="dropdown w-100">
                            @await Html.PartialAsync("_ExpandButton", new _ExpandButton
                                {
                                    Attributes = $"type=\"button\" id=\"dropdownColorButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"",
                           Placeholder = (selectedColors.Any() ? string.Join(", ", selectedColors.Select(s => localizer.GetValue($"{typeof(CarColor).Name}_{s}"))) : Translator["Choose"]),
                                    ShowOverline = true,
                                    ShowOverlineInside = false, 
                                    HasOutsidOverlineSizeEffect = true,
                                    Overline = Translator["Color"],
                                    ShowAdditionalBackground = true,
                                    ShowAdditional = (selectedColors.Any() ? true : false),
                                    Additional = (selectedColors.Count().ToString())
                                })
                            <ul class="dropdown-menu w-100 my-shadow-1" name="color" aria-labelledby="dropdownColorButton" style="max-height: 320px; overflow-y:auto">
                                @foreach (FilterOptionViewModel option in ViewBag.AvailableFilters["color"])
                                {
                                    <li>
                                        @await Html.PartialAsync("_ListItem", new _ListItem
                                           {
                                               Classes = "dropdown-item p-0",
                                               Leading = await Html.PartialAsync("_Checkbox", new _Checkbox
                                               {
                                                   Attributes = $"value=\"{option.OriginalValue}\" {(selectedColors.Contains(option.OriginalValue) ? "checked" : "")}"
                                               }),
                                               Headline = option.TranslatedValue,
                                               ShowDivider = true,
                                               Clickable = true,
                                           })
                                    </li>
                                }
                            </ul>
                        </div>
                        <input value="@Context.Request.Query["color"]" type="hidden" id="colorInput" name="color">
                    </div>

                    <div class="row d-flex mx-0 mb-2">
                        <div class="col-6 ps-0 pe-1">
                            @await Html.PartialAsync("_LineEdit", new _LineEdit
                               {
                                   Attributes = $"type=\"number\" id=\"minPrice\" name=\"minPrice\" value=\"{Context.Request.Query["minPrice"]}\"",
                                   Placeholder = Translator["From"],
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["Price"],
                                   ShowAdditional = true,
                                   Additional = "zł"
                               })
                        </div>
                        <div class="col-6 ps-1 pe-0">
                            @await Html.PartialAsync("_LineEdit", new _LineEdit
                               {
                                   Attributes = $"type=\"number\" id=\"maxPrice\" name=\"maxPrice\" value=\"{Context.Request.Query["maxPrice"]}\"",
                                   Placeholder = Translator["To"],
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["Price"],
                                   ShowAdditional = true,
                                   Additional = "zł"
                               })
                        </div>
                    </div>

                    <div class="row mb-2 mx-0">
                        <div class="col-6 ps-0 pe-1">
                            @await Html.PartialAsync("_LineEdit", new _LineEdit
                               {
                                   Attributes = $"type=\"number\" id=\"minYear\" name=\"minYear\" value=\"{Context.Request.Query["minYear"]}\"",
                                   Placeholder = Translator["From"],
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["Year"]
                               })
                        </div>
                        <div class="col-6 ps-1 pe-0">
                            @await Html.PartialAsync("_LineEdit", new _LineEdit
                               {
                                   Attributes = $"type=\"number\" id=\"maxYear\" name=\"maxYear\" value=\"{Context.Request.Query["maxYear"]}\"",
                                   Placeholder = Translator["To"],
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["Year"]
                               })
                        </div>
                    </div>

                    <div class="row mb-2 mx-0">
                        <div class="col-6 ps-0 pe-1">
                            @await Html.PartialAsync("_LineEdit", new _LineEdit
                               {
                                   Attributes = $"type=\"number\" id=\"minMileage\" name=\"minMileage\" value=\"{Context.Request.Query["minMileage"]}\"",
                                   Placeholder = Translator["From"],
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["Mileage"],
                                   ShowAdditional = true,
                                   Additional = "km"
                               })
                        </div>
                        <div class="col-6 ps-1 pe-0">
                            @await Html.PartialAsync("_LineEdit", new _LineEdit
                               {
                                   Attributes = $"type=\"number\" id=\"maxMileage\" name=\"maxMileage\" value=\"{Context.Request.Query["maxMileage"]}\"",
                                   Placeholder = Translator["To"],
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["Mileage"],
                                   ShowAdditional = true,
                                   Additional = "km"
                               })
                        </div>
                    </div>

                    <div class="row mx-0">
                        <div class="col-6 ps-0 pe-1">
                            @await Html.PartialAsync("_LineEdit", new _LineEdit
                               {
                                   Attributes = $"type=\"number\" id=\"minEngineVolume\" name=\"minEngineVolume\" value=\"{Context.Request.Query["minEngineVolume"]}\"",
                                   Placeholder = Translator["From"],
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["EngineVolume"],
                                   ShowAdditional = true,
                                   Additional = "cm3"
                               })
                        </div>
                        <div class="col-6 ps-1 pe-0">
                            @await Html.PartialAsync("_LineEdit", new _LineEdit
                               {
                                   Attributes = $"type=\"number\" id=\"maxEngineVolume\" name=\"maxEngineVolume\" value=\"{Context.Request.Query["maxEngineVolume"]}\"",
                                   Placeholder = Translator["To"],
                                   ShowOverline = true,
                                   ShowOverlineInside = false, 
                                   HasOutsidOverlineSizeEffect = true,
                                   Overline = Translator["EngineVolume"],
                                   ShowAdditional = true,
                                   Additional = "cm3"
                               })
                        </div>
                    </div>

                </div>
            </div>
            <div class="border mt-2 border-secondary-500 p-3 bg-secondary-200 rounded-pill" id="filterButtons">
                <div class="row row-mobile-filter gx-3 justify-content-between border-light">
                    <a id="filter-clear-button" class="col-6">
                        @await Html.PartialAsync("_Button", new _Button
                        {
                            Text = Translator["Clear"],
                            Color = "secondary",
                            Classes = "w-100 bg-white ",
                            Attributes = "",
                            LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Clear"), Color = "primary" }),
                            RightIcon = null,
                            TextColor = "text-primary"
                        })
                    </a>
                    <a id="filter-submit-button" class="col-6">
                        @await Html.PartialAsync("_Button", new _Button
                        {
                            Text = Translator["Find"],
                            Color = "primary",
                            Classes = "w-100",
                            Attributes = "",
                            LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Search"), Color = "white" }),
                            RightIcon = null,
                            TextColor = ""
                        })
                    </a>
                </div>
            </div>
        </form>
    </div>
    

    <div class="album p-0 col-md-6 col-lg-7 col-xl-8 col-xxl-9 col-12">
        <div class="ms-xl-0 ms-2 align-items-center d-none d-md-flex">
            <a href="javascript:history.back()">
                @await Html.PartialAsync("_Button", new _Button
               {
                   Text = localizer.Back,
                   Color = "primary",
                   Classes = "me-2",
                   Attributes = "",
                   LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Arrow back"), Color = "white" }),
                   RightIcon = null,
                   TextColor = ""
               })
            </a>
            <div class="d-flex overflow-auto py-2">
                <a asp-controller="Home" asp-action="Catalog">
                    @await Html.PartialAsync("_Button", new _Button
                   {
                       Text = localizer.Catalog,
                       Color = "secondary",
                       Classes = "me-2",
                       Attributes = "type=\"button\"",
                       LeftIcon = null,
                       RightIcon = null,
                       TextColor = ""
                   })
                </a>
            </div>
        </div>
        @if (Model.ShippingCars.Count > 0)
        {
            <div class="container mx-md-0 p-0">
                <div class="col-12 px-0 mb-3">
                    <div class="row p-0 px-2 mx-0 text-headline-sm mb-2 d-md-flex d-none text-neutral-900">@localizer.ShippingCars</div>
                    <div class="row bg-neutral-200 p-3 rounded-16 mx-0">
                        <div class="col px-0">
                            <div class="row p-0 px-2 mx-0 text-title-lg d-md-flex d-md-none text-neutral-900">@localizer.ShippingCars</div>
                            <div class="row px-0 gx-3 py-2 flex-nowrap overflow-auto">
                                @foreach (CarCardViewModel car in Model.ShippingCars)
                                {
                                    car.Classes = "col-8 col-sm-5 col-md-7 col-lg-5 col-xl-3";
                                    car.IsFullSize = false;
                                    @await Html.PartialAsync("_CarCard", car)
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row p-0 px-2 mx-0 text-headline-sm mb-2 d-md-flex d-none text-neutral-900">@localizer.Catalog</div>
        }
        
        <div id="carsListing" class="p-3 rounded-32 bg-neutral-200 container mx-md-0">
            @*All cars go here*@
        </div>

        <div class="w-100 text-center mt-3">
            <button class="btn btn-primary rounded-pill" id="showMoreButton">@Translator["ShowMore"]</button>
        </div>

        @if (Model.SoldCars.Count > 0)
        {
            <div class="container mx-md-0 p-0">
                <div class="col-12 px-0 mb-3">
                    <div class="row p-0 px-2 mx-0 text-headline-sm mb-2 d-md-flex d-none text-neutral-900">@localizer.SoldCars</div>
                    <div class="row bg-neutral-200 p-3 rounded-16 mx-0">
                        <div class="col px-0">
                            <div class="row p-0 px-2 mx-0 text-title-lg d-md-flex d-md-none text-neutral-900">@localizer.SoldCars</div>
                            <div class="row px-0 gx-3 py-2 flex-nowrap overflow-auto">
                                @foreach (CarCardViewModel car in Model.SoldCars)
                                {
                                    car.Classes = "col-8 col-sm-5 col-md-7 col-lg-5 col-xl-3";
                                    car.IsFullSize = false;
                                    @await Html.PartialAsync("_CarCard", car)
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>






@section Scripts {
       <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dropdownItems = document.querySelectorAll('.dropdown-menu[name="dropdownSortby"] .dropdown-item');
            const hiddenSelect = document.getElementById("sortOrderSelect");
            const expandButtonText = document.querySelector(".expand-button-input");

            dropdownItems.forEach(item => {
                item.addEventListener("click", function () {
                    const selectedValue = this.getAttribute("data-value");

                    hiddenSelect.value = selectedValue;

                    console.log(this);

                    if (expandButtonText) {
                        expandButtonText.textContent = this.textContent.trim();
                    }

                    const expandButton = document.getElementById("dropdownSortbyButton");
                    const dropdown = bootstrap.Dropdown.getInstance(expandButton);
                    dropdown.hide();
                });
            });
        });

    </script>


    <script>
        $(document).ready(function () {
            var carsDisplayed = 0;

            function getCars() {
                $.ajax({
                    url: '/Home/GetCars',
                    data: { carsDisplayed: carsDisplayed },
                    type: 'GET',
                    success: function (data) {
                        var html = $(data);

                        $('#carsListing').append(html);
                        carsDisplayed += html.data('cars-in-view');
                        if (html.data('show-more-button') == "False") {
                            console.log('hiding');
                            $('#showMoreButton').hide();
                        }
                    },
                    error: function () {
                        alert('An error occurred while loading more cars.');
                    }
                });
            }

            function updateLikeButtons() {
                var likedCars = getCookie('likes'); 
                if (likedCars) {
                    likedCars = JSON.parse(likedCars);
                    likedCars.forEach(function (carId) {
                        var likeButton = $('.like-button[data-car-id="' + carId + '"]');
                        likeButton.addClass('btn-primary').removeClass('btn-secondary');
                        likeButton.find('svg path').attr('fill', 'white');
                    });
                }
               
            }

            getCars();

            $('#showMoreButton').click(function () {
                getCars();
            });
        });
    </script>
    <script>
        $('.btn').click(function () {
            $(this).blur();
        });
    </script>


    <script>
        $(document).ready(function () {
            function initializeLineEdit() {
                $('.line-edit-input').each(function () {
                    updateLineEditState(this);
                });
            }
            function initializeDropdowns() {
                $('.dropdown-menu').each(function () {
                    const dropdownOptions = $(this);
                    const selectedOptions = updateDropdownSelection(dropdownOptions);

                    updateDropdownInput(dropdownOptions, selectedOptions);

                    const dropdown = dropdownOptions.closest('.dropdown')[0];
                    const expandButton = dropdown.querySelector('.expand-button');

                    if (expandButton) {
                        updateExpandButton(expandButton, selectedOptions);
                    }
                });
            }

            initializeDropdowns();
            initializeLineEdit();

            var translations = @Html.Raw(Json.Serialize(translations));

            $('#filter-submit-button').click(function () {
                $(this).blur();
            });

            $('#filters-mobile-button').click(function () {
                $('#filters-mobile-list').toggleClass('open');
            });

            $('#sort-mobile-button').click(function () {
                $('#sort-mobile-list').toggleClass('open');
            });

            $('.filter-mobile-close-button').click(function () {
                $('#filters-mobile-list').removeClass('open');
            });

            $('.sort-mobile-close-button').click(function () {
                console.log('closing')
                $('#sort-mobile-list').removeClass('open');
            });

            $('#filter-clear-button').click(function (event) {
                event.preventDefault();
                console.log('clearing');
                $('#filtersForm input[type="text"], #filtersForm input[type="number"]').val('');
                $('#filtersForm select').prop('selectedIndex', 0);
                $('#filtersForm input[type="checkbox"]').prop('checked', false);
                $('#filtersForm input[type="hidden"]').val('');
                $('#filtersForm span').filter(function () {
                    return !$(this).closest('#filterButtons').length && !$(this).hasClass('checkbox-custom');
                }).text('@Translator["Choose"]');

                $('#filtersForm .expand-button-trailng-supportive-text').filter(function () {
                    return !$(this).closest('#filterButtons').length && !$(this).hasClass('checkbox-custom');
                }).removeClass('d-block').addClass('d-none');

                $('#filtersForm .expand-button-input').filter(function () {
                    return !$(this).closest('#filterButtons').length && !$(this).hasClass('checkbox-custom');
                }).removeClass('text-primary').addClass('text-neutral-900');

                $('#filtersForm .expand-button-overline-text').filter(function () {
                    return !$(this).closest('#filterButtons').length && !$(this).hasClass('checkbox-custom');
                }).removeClass('text-primary').addClass('text-neutral-900');

                $('#filtersForm .active-indicator').filter(function () {
                    return !$(this).closest('#filterButtons').length && !$(this).hasClass('checkbox-custom');
                }).removeClass('border-primary500').addClass('border-neutral900');

                $('#filtersForm .active-indicator').filter(function () {
                    return !$(this).closest('#filterButtons').length && !$(this).hasClass('checkbox-custom');
                }).css('border-width', '1px');

                $('#filtersForm .line-edit-input').filter(function () {
                    return !$(this).closest('#filterButtons').length && !$(this).hasClass('checkbox-custom');
                }).removeClass('text-primary').addClass('text-neutral-900');

                $('#filtersForm .line-edit').filter(function () {
                    return !$(this).closest('#filterButtons').length && !$(this).hasClass('checkbox-custom');
                }).removeClass('active')

            });

            $('.mobile-sort-option').click(function () {
                var sortOrder = $(this).attr('value');
                $('#mobileSortOrder').val(sortOrder);
                $('#mobileFiltersForm').submit();
            });

            $('.showDropdownOptionsButton').click(function () {
                var dropdownOptions = $(this).next('.dropdownOptions');
                dropdownOptions.style.display = dropdownOptions.style.display === "block" ? "none" : "block";
            });

            function updateLineEditState(inputElement) {
                var lineEdit = inputElement.closest('.line-edit');
                if ($(inputElement).val()) {
                    lineEdit.classList.add("active");
                    inputElement.classList.add("text-primary");
                    inputElement.classList.remove("text-neutral-900");
                } else {
                    lineEdit.classList.remove("active");
                    inputElement.classList.remove("text-primary");
                    inputElement.classList.add("text-neutral-900");
                }
            }

            $('.line-edit-input').change(function () {
                updateLineEditState(this);
            });


            function updateDropdownSelection(dropdownOptions) {
                const checkboxes = dropdownOptions.find("input[type='checkbox']");
                const selectedOptions = [];

                checkboxes.each(function () {
                    if ($(this).is(':checked')) {
                        selectedOptions.push($(this).val());
                    }
                });

                return selectedOptions;
            }

            function updateDropdownInput(dropdownOptions, selectedOptions) {
                const dropdownName = dropdownOptions.attr('name');
                $("#" + dropdownName + "Input").val(selectedOptions.join(','));

                const span = dropdownOptions.prev().find('span');
                span.text(selectedOptions.length > 0 ? selectedOptions.join(', ') : 'Any');
            }

            function updateExpandButton(expandButton, selectedOptions) {
                const headline = selectedOptions.length > 0 ? selectedOptions.join(', ') : '@localizer.Choose';
                const additional = selectedOptions.length.toString();

                const headlineElement = expandButton.querySelector('.expand-button-input');
                if (headlineElement) {
                    headlineElement.textContent = headline;
                }

                const activeIndicator = expandButton.querySelector('.active-indicator');
                const overlineText = expandButton.querySelector('.expand-button-overline-text');
                const additionalElement = expandButton.querySelector('.expand-button-trailng-supportive-text');

                if (selectedOptions.length > 0) {
                    additionalElement.classList.remove("d-none");
                    additionalElement.classList.add("d-block");
                    headlineElement.classList.remove("text-neutral-900");
                    headlineElement.classList.add("text-primary");
                    overlineText.classList.add("text-primary");
                    overlineText.classList.remove("text-neutral-900");
                    activeIndicator.style.borderWidth = "3px";
                    activeIndicator.classList.remove("border-neutral900");
                    activeIndicator.classList.add("border-primary500");
                } else {
                    additionalElement.classList.remove("d-block");
                    additionalElement.classList.add("d-none");
                    headlineElement.classList.remove("text-primary");
                    headlineElement.classList.add("text-neutral-900");
                    overlineText.classList.remove("text-primary");
                    overlineText.classList.add("text-neutral-900");
                    activeIndicator.style.borderWidth = "1px";
                    activeIndicator.classList.add("border-neutral900");
                    activeIndicator.classList.remove("border-primary500");
                }

                const additionalElementDiv = expandButton.querySelector('.expand-button-trailng-supportive-text > div');
                additionalElementDiv.textContent = additional;
            }

            $('.dropdown-item').change(function () {
                const dropdownOptions = $(this).closest('.dropdown-menu');
                const selectedOptions = updateDropdownSelection(dropdownOptions);

                updateDropdownInput(dropdownOptions, selectedOptions);

                const dropdown = $(this).closest('.dropdown')[0];
                const expandButton = dropdown.querySelector('.expand-button');

                if (expandButton) {
                    updateExpandButton(expandButton, selectedOptions);
                }
                
                var dropdownName = dropdownOptions.attr('name');
                $("#" + dropdownName + "Input").val(selectedOptions.join(','));

                var span = dropdownOptions.prev().find('span');
                var translatedOptions = selectedOptions.map(function(option) {
                    return translations[option] || option;
                });
                
                span.text(selectedOptions.length > 0 ? translatedOptions.join(', ') : translations['choose']);

            });


            $('.dropdown-item').click(function (e) {
                e.stopPropagation();
            });

            $('.mobile-filter-select').click(function () {
                var filterType = $(this).attr('filterType');
                var culture = '@CultureInfo.CurrentUICulture.Name';
                $.ajax({
                    url: '/Home/GetFilterOptions',
                    data: { filterType: filterType, culture: culture },
                    type: 'GET',
                    success: function (data) {

                        $('body').append(data); 
                        $('.mobile-filter-select-screen').addClass('open');

                        setupFilterScreenEventHandlers(filterType);
                    },
                    error: function () {
                        console.error('Failed to load filter options.');
                    }
                });
            });

            function setupFilterScreenEventHandlers(filterType) {
                $('#mobile-filter-select-save-button').click(function () {
                    var values = [];
                    $('.mobile-list-items input[type="checkbox"]:checked').each(function () {
                        values.push($(this).val());
                    });
                    $('input[name="' + filterType + '"]').val(values.join(', '));
                    $('p[name="' + filterType + '"]').text(values.join(', '));
                    $('[filterType="' + filterType + '"] .list-item-trailng-supportive-text').text(values.join(', '));
                    $('.mobile-filter-select-screen').remove();
                });

                $('#filter-mobile-select-clear-button').click(function () {
                    $('.mobile-list-items input[type="checkbox"]').prop('checked', false);
                });

                $('#filter-mobile-select-close-button').click(function () {
                    $('.mobile-filter-select-screen').remove();
                });

                $('.mobile-list-item').click(function () {
                    var checkbox = $(this).find('input[type="checkbox"]');
                    checkbox.prop('checked', !checkbox.prop('checked')); 
                });
            }
        });

        function getActualDimensions(selector) {
            var previousCss = $(selector).attr("style");

            var dimensions = {
                height: $(selector).outerHeight(true),
                width: $(selector).outerWidth(true)
            };

            $(selector).attr("style", previousCss ? previousCss : "");

            return dimensions;
        }
       

    </script>
}