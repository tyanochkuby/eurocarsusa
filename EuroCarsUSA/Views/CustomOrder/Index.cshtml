@using EuroCarsUSA.Controllers
@using EuroCarsUSA.Resources
@using EuroCarsUSA.ViewModels
@using EuroCarsUSA.Data.Enums
@using Microsoft.Extensions.Localization
@using EuroCarsUSA.Views.Shared.Components
@inject IStringLocalizer<CustomOrderController> Translator
@inject Localizer localizer

@model CustomOrderViewModel

<div class="bg-neutral-200 w-100 h-100 py-4">
    <form id="customOrderForm" asp-action="SubmitForm" method="post">
        <div class="container p-md-5 pt-md-3 p-3 pt-2 text-center text-md-start bg-white rounded-32 mb-3 justify-content-center">
            <div class="d-flex justify-content-center">
                <div class="text-md-display-lg text-title-lg mb-3 text-subhead text-center border-bottom">
                    @localizer.CustomOrder
                </div>
            </div>
            <div class="text-md-display-sm text-body-md text-subhead">
                @localizer.CustomOrderText
            </div>
        </div>

        <div class="container mt-5 mt-md-4 mb-2 ">
            <div class="row px-md-5 ">
                <div class="col-auto px-0">
                    <div class="row mx-0 mb-2 mb-md-0 px-3 px-md-0">
                        <a href="javascript:history.back()" class="col-auto ps-0 pe-3">
                            @await Html.PartialAsync("_Button", new _Button
                       {
                           Text = localizer.Back,
                           Color = "primary",
                           LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Arrow back"), Color = "white" }),
                           RightIcon = null,
                           Type = "button",
                       })
                        </a>
                        <a asp-controller="CustomOrder" asp-action="Index" class="col-auto px-0">
                            @await Html.PartialAsync("_Button", new _Button
                            {
                                Text = localizer.CustomOrder,
                                Color = "secondary",
                                Classes = "",
                                Attributes = "type=\"button\"",
                                LeftIcon = null,
                                RightIcon = null,
                                TextColor = "text-primary"
                            })
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="container mb-3 p-4 pt-3 rounded-32 bg-white">
            <div class="text-headline-sm px-2 mb-2">
                @localizer.TrackYourOrder
            </div>
            <div class="col-md col-12 p-3 bg-secondary-200 rounded-16">
                <div class="row m-0">
                    <div class="col-12 col-md-4 p-md-0 p-2 px-0 me-md-3 bg-secondary-200 mb-2 mb-md-0">
                        <component type="typeof(EditableField<int>)"
                                   render-mode="ServerPrerendered"
                                   param-CssClass="@( "h-100" )" />
                    </div>
                    <div class="col-12 col-md-auto d-flex flex-column justify-content-end px-0">
                        <a class="submit">
                            @await Html.PartialAsync("_Button", new _Button
                       {
                           Text = localizer.Find,
                           Color = "primary",
                           Classes = "col-12",
                           Attributes = "type=\"button\"",
                           LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Search"), Color = "white" }),
                           RightIcon = null,
                           TextColor = ""
                       })
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="container p-4 bg-white rounded-32">
            <div class="text-headline-sm px-2 mb-2">
                @localizer.CreateYourOrder
            </div>
            <div id="forms-container" class="row mx-0 gy-4">
                @for (int i = 0; i < Model.Forms.Count(); i++)
                {
                    @await Html.PartialAsync("_CustomOrderForm", new FormViewModel
                    {
                        Index = i,
                        CarMakes = Model.Forms[i].CarMakes,
                        CarColors = Model.Forms[i].CarColors,
                        CarTypes = Model.Forms[i].CarTypes,
                        CarFuelTypes = Model.Forms[i].CarFuelTypes,
                        CarTransmissions = Model.Forms[i].CarTransmissions,
                        Model = Model.Forms[i].Model,
                        MaxPrice = Model.Forms[i].MaxPrice,
                        MaxMileage = Model.Forms[i].MaxMileage,
                        MinYear = Model.Forms[i].MinYear,
                        MaxYear = Model.Forms[i].MaxYear,
                        Description = Model.Forms[i].Description
                    })
                }
            </div>

            <div class="d-flex justify-content-center my-3">
                @await Html.PartialAsync("_Button", new _Button
                {
                    Text = localizer.AddForm,
                    Color = "primary",
                    Classes = "",
                    Attributes = "type=\"button\" onclick=\"addForm()\"",
                    LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Add"), Color = "white" }),
                    RightIcon = null,
                    TextColor = ""
                })
            </div>

            <div class="bg-secondary-100 p-3 rounded-16 row mx-0 mt-3">
                <div class="text-title-lg text-neutral-900 mb-3 px-0">Provide your contact data</div>
                <div class="col px-0">
                    <div class="form-group col mb-2">
                        <div class="line-edit position-relative">
                            <label class="line-edit-text-field d-flex row m-0 bg-white position-relative" asp-for="Email">
                                <div class="line-edit-state-layer row m-0 py-1 px-0 d-flex ps-3 pe-3">
                                    <div class="line-edit-content col p-0 d-block w-100 align-content-center">
                                        <div class="row m-0 ">
                                            <div class="line-edit-label-text col p-0 py-1">
                                                <div class="line-edit-overline-text text-label-md text-neutral-900 row m-0">
                                                    Email
                                                </div>
                                                <div class="text-body-lg text-neutral-900 row m-0">
                                                    <input class="p-0 text-neutral-900 line-edit-input" placeholder="Email" asp-for="Email" >
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="active-indicator position-absolute w-100"> </div>
                            </label>
                            <span class="line-edit-supportive-text text-label-md text-neutral-900 px-3 m-0 pt-1 d-flex text-byzantine" asp-validation-for="Email">
                            </span>
                        </div>
                    </div>
                    <div class="form-group col mb-2">
                        <div class="line-edit position-relative">
                            <label class="line-edit-text-field d-flex row m-0 bg-white position-relative" asp-for="PhoneNumber">
                                <div class="line-edit-state-layer row m-0 py-1 px-0 d-flex ps-3 pe-3">
                                    <div class="line-edit-content col p-0 d-block w-100 align-content-center">
                                        <div class="row m-0 ">
                                            <div class="line-edit-label-text col p-0 py-1">
                                                <div class="line-edit-overline-text text-label-md text-neutral-900 row m-0">
                                                    @localizer.PhoneNumber
                                                </div>
                                                <div class="text-body-lg text-neutral-900 row m-0">
                                                    <input class="p-0 text-neutral-900 line-edit-input" placeholder="@localizer.PhoneNumber" oninput="validateInput(this)" asp-for="PhoneNumber">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="active-indicator position-absolute w-100"> </div>
                            </label>
                            <span class="line-edit-supportive-text text-label-md text-neutral-900 px-3 m-0 pt-1 d-flex text-byzantine" asp-validation-for="PhoneNumber">
                            </span>
                        </div>
                    </div>
                    <div class="form-group col">
                        <div class="line-edit position-relative">
                            <label class="line-edit-text-field d-flex row m-0 bg-white position-relative" asp-for="Name">
                                <div class="line-edit-state-layer row m-0 py-1 px-0 d-flex ps-3 pe-3">
                                    <div class="line-edit-content col p-0 d-block w-100 align-content-center">
                                        <div class="row m-0 ">
                                            <div class="line-edit-label-text col p-0 py-1">
                                                <div class="line-edit-overline-text text-label-md text-neutral-900 row m-0">
                                                    @localizer.Name
                                                </div>
                                                <div class="text-body-lg text-neutral-900 row m-0">
                                                    <input class="p-0 text-neutral-900 line-edit-input" placeholder="@localizer.Name" oninput="validateInput(this)" asp-for="Name">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="active-indicator position-absolute w-100"> </div>
                            </label>
                            <span class="line-edit-supportive-text text-label-md text-neutral-900 px-3 m-0 pt-1 d-flex text-byzantine" asp-validation-for="Name">
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <input type="hidden" name="recaptchaResponse" id="recaptchaResponse" />

            <div class="row mx-0 mt-3">
                <div class="d-flex justify-content-end">
                    @await Html.PartialAsync("_Button", new _Button
               {
                   Text = localizer.SubmitForm,
                   Color = "primary",
                   Classes = "",
                   Attributes = "type=\"button\" onclick=\"onClick(event)\"",
                   RightIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Export notes"), Color = "white" }),
                   TextColor = ""
               })
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const validationElements = document.querySelectorAll(".field-validation-valid");

            validationElements.forEach((element) => {
                const observer = new MutationObserver((mutations) => {
                    mutations.forEach((mutation) => {
                        if (
                            mutation.type === "attributes" &&
                            mutation.attributeName === "class"
                        ) {
                            if (element.classList.contains("field-validation-error")) {
                                const parentLineEdit = element.closest(".line-edit");
                                if (parentLineEdit) {
                                    parentLineEdit.classList.add("error");
                                }
                            } else {
                                const parentLineEdit = element.closest(".line-edit");
                                if (parentLineEdit) {
                                    parentLineEdit.classList.remove("error");
                                }
                            }
                        }
                    });
                });
                observer.observe(element, {
                    attributes: true,
                    attributeFilter: ["class"],
                });
            });
        });

    </script>
    <script>
        function addForm() {
            var formsContainer = document.getElementById('forms-container');
            var formIndex = formsContainer.children.length;
            $.ajax({
                url: '@Url.Action("GetFormComponent", "CustomOrder")',
                data: { index: formIndex },
                type: 'GET',
                success: function (data) {
                    formsContainer.insertAdjacentHTML('beforeend', data);
                    setupDropdownEventHandlers(formIndex);
                },
                error: function () {
                    console.error('Failed to load form component.');
                }
            });
        }

        function removeForm(button) {
            var formContainer = button.closest('.form-viewmodel-container');
            formContainer.remove();
        }

        function setupDropdownEventHandlers(index) {
            $(`ul[name='Forms[${index}].CarMakes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarMakes', this);
            });
            $(`ul[name='Forms[${index}].CarColors'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarColors', this);
            });
            $(`ul[name='Forms[${index}].CarTypes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarTypes', this);
            });
            $(`ul[name='Forms[${index}].CarFuelTypes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarFuelTypes', this);
            });
            $(`ul[name='Forms[${index}].CarTransmissions'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarTransmissions', this);
            });
        }

        function updateHiddenSelect(index, propertyName, dropdownItem) {
            var dropdownOptions = $(dropdownItem).closest('.dropdown-menu');
            var checkboxes = dropdownOptions.find("input[type='checkbox']");
            var selectedValues = [];

            checkboxes.each(function () {
                if ($(this).is(':checked')) {
                    selectedValues.push($(this).val());
                }
            });

            var selectElement = $(`#${propertyName.toLowerCase()}Input${index}`);
            selectElement.empty();
            selectedValues.forEach(function (value) {
                selectElement.append(new Option(value, value, true, true));
            });
        }

        $('.dropdown-item').click(function (e) {
            e.stopPropagation();
        });
        $(document).ready(function () {
            for (var i = 0; i < @Model.Forms.Count; i++) {
                setupDropdownEventHandlers(i);
            }
        });

         $.validator.addMethod("atleastoneproperty", function (value, element, params) {
            var properties = params.split(',');
            var isValid = properties.some(function (property) {
                return $(`[name='${property}']`).val().trim() !== '';
            });
            return isValid;
        });

        $.validator.unobtrusive.adapters.add("atleastoneproperty", ["properties"], function (options) {
            options.rules["atleastoneproperty"] = options.params.properties;
            options.messages["atleastoneproperty"] = options.message;
        });

        function onClick(e) {
            e.preventDefault();
            grecaptcha.ready(function() {
                grecaptcha.execute('6LeBlJ8qAAAAALREG8fJGHrBQphVcbpSByDPZZ25', {action: 'submit'}).then(function(token) {
                    document.getElementById('recaptchaResponse').value = token;
                    document.getElementById('customOrderForm').submit();
                });
            });
        }
    </script>
}
