@using EuroCarsUSA.Controllers
@using EuroCarsUSA.ViewModels
@using EuroCarsUSA.Data.Enums
@using Microsoft.Extensions.Localization
@using EuroCarsUSA.Views.Shared.Components
@inject IStringLocalizer<CustomOrderController> Translator

@model CustomOrderViewModel

<div class="bg-neutral-200 w-100 h-100 py-4">
    <form asp-action="SubmitForm" method="post">
        <div class="container p-5 pt-3 bg-white rounded-32 mb-3 justify-content-center">
            <div class="d-flex justify-content-center">
                <div class="text-display-lg mb-3 text-subhead text-center border-bottom">
                    Individual order
                </div>
            </div>
            <div class="text-display-sm text-subhead">
                This section is dedicated to your personal requests. If you cannot find your desired car, you can apply your request to the dealer via this section. Provide your personal preferences with the help of these filters. Provide your contact information so we can contact you back.
            </div>
        </div>

        <div class="container mt-5 mt-md-4 mb-2 ">
            <div class="row px-md-5 ">
                <div class="col-auto px-0">
                    <div class="row mx-0 mb-2 mb-md-0 px-3 px-md-0">
                        <a asp-controller="Admin" asp-action="BackToCatalogWithFilters" class="col-auto ps-0 pe-3">
                            @await Html.PartialAsync("_Button", new _Button
                       {
                           Text = "Back",
                           Color = "primary",
                           Classes = "",
                           Attributes = "",
                           LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Arrow back"), Color = "white" }),
                           RightIcon = null,
                           TextColor = ""
                       })
                        </a>
                        <a class="col-auto px-0">
                            @await Html.PartialAsync("_Button", new _Button
                       {
                           Text = "Individual order",
                           Color = "secondary",
                           Classes = "",
                           Attributes = "",
                           LeftIcon = null,
                           RightIcon = null,
                           TextColor = "text-primary"
                       })
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="container mb-3 p-4 pt-3 rounded-32 bg-white">
            <div class="text-headline-sm px-2 mb-2">Search your order</div>
            <div class="col-md col-12 p-3 bg-secondary-200 rounded-16">
                <div class="row m-0">
                    <div class="col-12 col-md-4 p-md-0 p-2 px-0 me-md-3 bg-secondary-200 mb-2 mb-md-0">
                        <component type="typeof(EditableField<int>)"
                                   render-mode="ServerPrerendered"
                                   param-CssClass="@( "h-100" )" />
                    </div>
                    <div class="col-12 col-md-auto d-flex flex-column justify-content-end px-0">
                        <a class="submit">
                            @await Html.PartialAsync("_Button", new _Button
                       {
                           Text = "Find",
                           Color = "primary",
                           Classes = "col-12",
                           Attributes = "",
                           LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Search"), Color = "white" }),
                           RightIcon = null,
                           TextColor = ""
                       })
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="container p-4 bg-white rounded-32">
            <div class="text-headline-sm px-2 mb-2">Create your order</div>
            <div id="forms-container" class="row mx-0 gy-4">
                @for (int i = 0; i < Model.Forms.Count(); i++)
                {
                    @await Html.PartialAsync("_CustomOrderForm", new FormViewModel
                    {
                        Index = i,
                        CarMakes = Model.Forms[i].CarMakes,
                        CarColors = Model.Forms[i].CarColors,
                        CarTypes = Model.Forms[i].CarTypes,
                        CarFuelTypes = Model.Forms[i].CarFuelTypes,
                        CarTransmissions = Model.Forms[i].CarTransmissions,
                        Model = Model.Forms[i].Model,
                        MaxPrice = Model.Forms[i].MaxPrice,
                        MaxMileage = Model.Forms[i].MaxMileage,
                        MinYear = Model.Forms[i].MinYear,
                        MaxYear = Model.Forms[i].MaxYear,
                        Description = Model.Forms[i].Description
                    })
                }
            </div>

            <div class="d-flex justify-content-center my-3">
                @await Html.PartialAsync("_Button", new _Button
                {
                    Text = "Add Form",
                    Color = "primary",
                    Classes = "",
                    Attributes = "type=\"button\" onclick=\"addForm()\"",
                    LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Add"), Color = "white" }),
                    RightIcon = null,
                    TextColor = ""
                })
            </div>

            <div class="bg-secondary-100 p-3 rounded-16 row mx-0 mt-3">
                <div class="col px-0">
                    <div class="form-group col">
                        <label asp-for="Email"></label>
                        <input asp-for="Email" class="form-control" />
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>
                    <div class="form-group col">
                        <label asp-for="PhoneNumber"></label>
                        <input asp-for="PhoneNumber" class="form-control" />
                        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                    </div>
                    <div class="form-group col">
                        <label asp-for="Name"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row mx-0 mt-3">
                <div class="d-flex justify-content-end">
                    @await Html.PartialAsync("_Button", new _Button
                    {
                        Text = "Submit and send form",
                        Color = "primary",
                        Classes = "",
                        Attributes = "type=\"submit\" ",
                        LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Done"), Color = "white" }),
                        RightIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Export notes"), Color = "white" }),
                        TextColor = ""
                    })
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function addForm() {
            var formsContainer = document.getElementById('forms-container');
            var formIndex = formsContainer.children.length;
            $.ajax({
                url: '@Url.Action("GetFormComponent", "CustomOrder")',
                data: { index: formIndex },
                type: 'GET',
                success: function (data) {
                    formsContainer.insertAdjacentHTML('beforeend', data);
                    setupDropdownEventHandlers(formIndex);
                },
                error: function () {
                    console.error('Failed to load form component.');
                }
            });
        }

        function removeForm(button) {
            var formContainer = button.closest('.form-viewmodel-container');
            formContainer.remove();
        }

        function setupDropdownEventHandlers(index) {
            $(`ul[name='Forms[${index}].CarMakes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarMakes', this);
            });
            $(`ul[name='Forms[${index}].CarColors'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarColors', this);
            });
            $(`ul[name='Forms[${index}].CarTypes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarTypes', this);
            });
            $(`ul[name='Forms[${index}].CarFuelTypes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarFuelTypes', this);
            });
            $(`ul[name='Forms[${index}].CarTransmissions'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarTransmissions', this);
            });
        }

        function updateHiddenSelect(index, propertyName, dropdownItem) {
            var dropdownOptions = $(dropdownItem).closest('.dropdown-menu');
            var checkboxes = dropdownOptions.find("input[type='checkbox']");
            var selectedValues = [];

            checkboxes.each(function () {
                if ($(this).is(':checked')) {
                    selectedValues.push($(this).val());
                }
            });

            var selectElement = $(`#${propertyName.toLowerCase()}Input${index}`);
            selectElement.empty();
            selectedValues.forEach(function (value) {
                selectElement.append(new Option(value, value, true, true));
            });
        }

        $('.dropdown-item').click(function (e) {
            e.stopPropagation();
        });
        $(document).ready(function () {
            for (var i = 0; i < @Model.Forms.Count; i++) {
                setupDropdownEventHandlers(i);
            }
        });

         $.validator.addMethod("atleastoneproperty", function (value, element, params) {
            var properties = params.split(',');
            var isValid = properties.some(function (property) {
                return $(`[name='${property}']`).val().trim() !== '';
            });
            return isValid;
        });

        $.validator.unobtrusive.adapters.add("atleastoneproperty", ["properties"], function (options) {
            options.rules["atleastoneproperty"] = options.params.properties;
            options.messages["atleastoneproperty"] = options.message;
        });
    </script>
}

