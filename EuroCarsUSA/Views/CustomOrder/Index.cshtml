@using EuroCarsUSA.Controllers
@using EuroCarsUSA.ViewModels
@using EuroCarsUSA.Data.Enums
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<CustomOrderController> Translator

@model CustomOrderViewModel

<div class="bg-neutral-200 w-100 h-100 py-4">
    <form asp-action="SubmitForm" method="post">
        <div class="container p-5 pt-3 bg-white rounded-32 mb-3 justify-content-center">
            <div class="d-flex justify-content-center">
                <div class="text-display-lg mb-3 text-subhead text-center border-bottom">
                    Individual order
                </div>
            </div>
            <div class="text-display-sm text-subhead">
                This section is dedicated to your personal requests. If you cannot find your desired car, you can apply your request to the dealer via this section. Provide your personal preferences with the help of these filters. Provide your contact information so we can contact you back.
            </div>
        </div>
        <div id="forms-container">
            @for (int i = 0; i < Model.Forms.Count(); i++)
            {
                @Html.Partial("_CustomOrderForm", new FormViewModel
       {
           Index = i,
           CarMakes = Model.Forms[i].CarMakes,
           CarColors = Model.Forms[i].CarColors,
           CarTypes = Model.Forms[i].CarTypes,
           CarFuelTypes = Model.Forms[i].CarFuelTypes,
           CarTransmissions = Model.Forms[i].CarTransmissions,
           Model = Model.Forms[i].Model,
           MaxPrice = Model.Forms[i].MaxPrice,
           MaxMileage = Model.Forms[i].MaxMileage,
           MinYear = Model.Forms[i].MinYear,
           MaxYear = Model.Forms[i].MaxYear,
           Description = Model.Forms[i].Description
       })
            }
        </div>

        <div class="d-flex justify-content-end mb-3">
            <button type="button" class="btn btn-secondary" onclick="addForm()">Add Form</button>
        </div>

        <div class="bg-secondary-100 p-3 rounded-16 row mx-0 mt-3">
            <div class="col">
                <div class="form-group col">
                    <label asp-for="Email"></label>
                    <input asp-for="Email" class="form-control" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
                <div class="form-group col">
                    <label asp-for="PhoneNumber"></label>
                    <input asp-for="PhoneNumber" class="form-control" />
                    <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                </div>
                <div class="form-group col">
                    <label asp-for="Name"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </div>
        </div>

        <div class="row mx-0 mt-3">
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function addForm() {
            var formsContainer = document.getElementById('forms-container');
            var formIndex = formsContainer.children.length;
            $.ajax({
                url: '@Url.Action("GetFormComponent", "CustomOrder")',
                data: { index: formIndex },
                type: 'GET',
                success: function (data) {
                    formsContainer.insertAdjacentHTML('beforeend', data);
                    setupDropdownEventHandlers(formIndex);
                },
                error: function () {
                    console.error('Failed to load form component.');
                }
            });
        }

        function removeForm(button) {
            var formContainer = button.closest('.form-viewmodel-container');
            formContainer.remove();
        }

        function setupDropdownEventHandlers(index) {
            $(`ul[name='Forms[${index}].CarMakes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarMakes', this);
            });
            $(`ul[name='Forms[${index}].CarColors'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarColors', this);
            });
            $(`ul[name='Forms[${index}].CarTypes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarTypes', this);
            });
            $(`ul[name='Forms[${index}].CarFuelTypes'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarFuelTypes', this);
            });
            $(`ul[name='Forms[${index}].CarTransmissions'] input[type='checkbox']`).change(function () {
                updateHiddenSelect(index, 'CarTransmissions', this);
            });
        }

        function updateHiddenSelect(index, propertyName, dropdownItem) {
            var dropdownOptions = $(dropdownItem).closest('.dropdown-menu');
            var checkboxes = dropdownOptions.find("input[type='checkbox']");
            var selectedValues = [];

            checkboxes.each(function () {
                if ($(this).is(':checked')) {
                    selectedValues.push($(this).val());
                }
            });

            var selectElement = $(`#${propertyName.toLowerCase()}Input${index}`);
            selectElement.empty();
            selectedValues.forEach(function (value) {
                selectElement.append(new Option(value, value, true, true));
            });
        }

        $('.dropdown-item').click(function (e) {
            e.stopPropagation();
        });
        $(document).ready(function () {
            for (var i = 0; i < @Model.Forms.Count; i++) {
                setupDropdownEventHandlers(i);
            }
        });

         $.validator.addMethod("atleastoneproperty", function (value, element, params) {
            var properties = params.split(',');
            var isValid = properties.some(function (property) {
                return $(`[name='${property}']`).val().trim() !== '';
            });
            return isValid;
        });

        $.validator.unobtrusive.adapters.add("atleastoneproperty", ["properties"], function (options) {
            options.rules["atleastoneproperty"] = options.params.properties;
            options.messages["atleastoneproperty"] = options.message;
        });
    </script>
}
