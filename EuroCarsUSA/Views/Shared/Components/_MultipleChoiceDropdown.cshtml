@using EuroCarsUSA.Views.Shared.Components
@model EuroCarsUSA.Views.Shared.Components._MultipleChoiceDropdown

@{
    string dropdownId = Model.DropdownId;
    string placeholder = Model.Placeholder;
    string overline = Model.Overline;
    var selectedValues = Model.SelectedValues;
    var options = Model.Options;
    var name = Model.Name;
}

<div class="pt-0" name="@name">
    <div class="dropdown w-100">
        @await Html.PartialAsync("_ExpandButton", new _ExpandButton
        {
            Classes="",
            Attributes = $"type=\"button\" id=\"{dropdownId}\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"",
            Placeholder = (selectedValues.Any() ? string.Join(", ", selectedValues) : placeholder),
	        Overline = overline,
            ShowOverline = true,
            ShowOverlineInside = true,
            ShowAdditionalBackground = true,
            ShowAdditional = (selectedValues.Any() ? true : false),
            Additional = (selectedValues.Count().ToString()),
        })
        <ul class="dropdown-menu w-100 my-shadow-3" name="@Model.Name" aria-labelledby="@dropdownId" style="max-height: 200px; overflow-y:scroll">
            @foreach (var option in options)
            {
                <li>
                    @await Html.PartialAsync("_ListItem", new _ListItem
                       {
                           Classes = "dropdown-item p-0",
                           Leading = await Html.PartialAsync("_Checkbox", new _Checkbox
                           {
                               Attributes = $"value=\"{option.OriginalValue}\" {(selectedValues.Contains(option.OriginalValue) ? "checked" : "")}"
                           }),
                           Headline = option.TranslatedValue,
                           ShowDivider = true,
                           Clickable = true,
                       })
                </li>
            }
        </ul>
    </div>
    <select multiple hidden id="@Model.InputId" name="@Model.Name">
        @foreach (var value in selectedValues)
        {
            <option selected>@value</option>
        }
    </select>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll('.dropdown-menu input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                const dropdown = checkbox.closest('.dropdown');
                const expandButton = dropdown.querySelector('.expand-button');

                if (expandButton) {
                    const selectedValues = Array.from(dropdown.querySelectorAll('.dropdown-menu input[type="checkbox"]:checked'))
                        .map(cb => cb.closest('li').querySelector('.list-item-content').textContent.trim());

                    const headline = selectedValues.length > 0 ? selectedValues.join(', ') : "Choose";

                    const additional = selectedValues.length.toString();

                    const headlineElement = expandButton.querySelector('.expand-button-input');
                    if (headlineElement) {
                        headlineElement.textContent = headline;
                    }

                    const additionalElement = expandButton.querySelector('.expand-button-trailng-supportive-text');
                    if (selectedValues.length > 0) {
                        additionalElement.classList.remove("d-none");
                        additionalElement.classList.add("d-block")
                    }
                    else {
                        additionalElement.classList.remove("d-block");
                        additionalElement.classList.add("d-none")
                    }

                    const additionalElementDiv = expandButton.querySelector('.expand-button-trailng-supportive-text > div');
                    additionalElementDiv.textContent = additional;
                }
            });
        });
    });


</script>
