﻿@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@using EuroCarsUSA.Extensions

@typeparam TEnum where TEnum : struct, Enum

<select @bind="SelectedValue" @bind:event="onchange" class="form-control" name="@Name">
    @foreach (var option in Enum.GetValues(typeof(TEnum)).Cast<TEnum>())
    {
        if(Translator is null)
        {
            <option value="@option">@option</option>
        }
        else
        {
            <option value="@option">@option.ToLocalizedString(Translator)</option>
        }
    }
</select>

@code {
    [Parameter]
    public TEnum SelectedValue { get; set; }

    [Parameter]
    public EventCallback<TEnum> SelectedValueChanged { get; set; }

    [Parameter]
    required public string Name { get; set; }

    [Parameter]
    public IStringLocalizer Translator { get; set;}

    private async Task OnSelectedValueChanged(ChangeEventArgs e)
    {
        SelectedValue = (TEnum)Enum.Parse(typeof(TEnum), e.Value.ToString());
        await SelectedValueChanged.InvokeAsync(SelectedValue);
    }
}