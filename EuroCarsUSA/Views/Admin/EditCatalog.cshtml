@using EuroCarsUSA.Data.Enums
@using EuroCarsUSA.Resources
@using EuroCarsUSA.ViewModels
@using EuroCarsUSA.Views.Shared.Components
@using Microsoft.AspNetCore.Components
@model IEnumerable<CatalogEditionViewModel>
@inject Localizer localizer

<form method="post" asp-action="SaveCatalogChanges" class="container bg-neutral-200 py-5">
    <input type="hidden" id="deletedCarsIds" name="deletedCarsIds" value="" />

    <div class="row pt-2 pb-3 px-3">
        <div class="d-flex col overflow-auto rounded-pill align-items-center">
            <a asp-controller="Home" asp-action="BackToCatalogWithFilters">
                @await Html.PartialAsync("_Button", new _Button
                {
                    Text = localizer.Back,
                    Color = "primary",
                    Classes = "me-2",
                    Attributes = "",
                    LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Arrow back"), Color = "white" }),
                    RightIcon = null,
                    TextColor = ""
                })
            </a>
        </div>
        <div class="d-block col-auto ">
            <div class="d-flex">
                @await Html.PartialAsync("_Button", new _Button
                    {
                        Text = localizer.Add,
                        Color = "secondary",
                        Classes = "me-2",
                        Attributes = "type=\"button\" onclick=\"addNewRow()\"",
                        LeftIcon = await Html.PartialAsync("_Icon", new { IconName = Url.Content("Add"), Color = "primary" }),
                        RightIcon = null,
                        TextColor = ""
                    })
                @await Html.PartialAsync("_Button", new _Button
                {
                    Text = localizer.Save,
                    Color = "primary",
                    Classes = "me-2",
                    Attributes = "type=\"submit\"",
                    LeftIcon = null,
                    RightIcon = null,
                    TextColor = ""
                })
            </div>
        </div>
        
    </div>

    <div class="bg-secondary p-3 p-3 rounded-16">
        <div id="catalog" class="row gy-2">
            @for (int i = 0; i < Model.Count(); i++)
            {
                var car = Model.ElementAt(i);
                @await Html.PartialAsync("_EditCar", new Tuple<CatalogEditionViewModel, int>(car, i))
            }
        </div>
    </div>
</form>

@section Scripts {
    <script>
        function deleteCar(carId, uniqueId) {
            var deletedCarsIdsInput = document.getElementById('deletedCarsIds');
            var deletedCarsIds = deletedCarsIdsInput.value ? JSON.parse(deletedCarsIdsInput.value) : [];
            if(carId != '')
            {
                deletedCarsIds.push(carId);
            }

            deletedCarsIdsInput.value = JSON.stringify(deletedCarsIds);

            var carRow = document.getElementById('car-row-' + uniqueId);
            carRow.parentElement.removeChild(carRow);
        }
        function addNewRow() {
            var tableBody = document.getElementById('catalog');
            var index = tableBody.children.length / 2;
            console.log(index);
            $.ajax({
                url: '/Admin/GetNewCatalogRow',
                data: { index: index },
                type: 'GET',
                success: function (html) {
                    tableBody.insertAdjacentHTML('beforeend', html);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error('Error details:', textStatus, errorThrown);
                    alert('An error occurred while adding a row: ' + textStatus + ' - ' + errorThrown);
                }
            });
        }
        document.addEventListener("click", function (event) {
            const openPopups = document.querySelectorAll(".popup-000:not(.d-none)");

            openPopups.forEach((popup) => {
                if (!popup.contains(event.target) && !event.target.closest(".popup-ooo")) {
                    popup.classList.add("d-none");
                }
            });
        });
    </script>

    <script>
        function toggleVisibility(uniqueId) {
            var popupDiv = document.getElementById("popup-" + uniqueId);
            var borderDiv = document.getElementById("border-" + uniqueId);
            var iconDiv = document.getElementById("icon-" + uniqueId);

            if (popupDiv.style.maxHeight === "0px") {
                popupDiv.style.maxHeight = "320px";
                borderDiv.style.opacity = 1;
                iconDiv.style.transform = "scaleY(-1)";
            } else {
                popupDiv.style.maxHeight = "0px";
                borderDiv.style.opacity = 0;
                iconDiv.style.transform = "scaleY(1)";
            }
        }

        function showBorder(uniqueId) {
            var popupDiv = document.getElementById("popup-" + uniqueId);
            var borderDiv = document.getElementById("border-" + uniqueId);
            if (popupDiv.style.display === "none") {
                borderDiv.style.opacity = 1;
            }
        }

        function hideBorder(uniqueId) {
            var popupDiv = document.getElementById("popup-" + uniqueId);
            var borderDiv = document.getElementById("border-" + uniqueId);
            if (popupDiv.style.display === "none") {
                borderDiv.style.opacity = 0;
            }
        }

    </script>
}

